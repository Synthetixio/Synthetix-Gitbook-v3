{
  "generator": "cannon cli 2.10.7",
  "timestamp": 1706205519,
  "def": {
    "setting": {
      "minimum_liquidity_ratio": {
        "defaultValue": "2000000000000000000"
      },
      "account_timeout_withdraw": {
        "defaultValue": "86400"
      },
      "snx_package": {
        "defaultValue": "synthetix:3.3.4"
      },
      "owner": {
        "defaultValue": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      },
      "target_preset": {
        "defaultValue": "main"
      },
      "salt": {
        "defaultValue": "snax"
      },
      "bundleSalt": {
        "defaultValue": "snax"
      },
      "deployer": {
        "defaultValue": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      },
      "eth_aggregator_address": {
        "defaultValue": "0x694AA1769357215DE4FAC081bf1f309aDC325306"
      },
      "weth_address": {
        "defaultValue": "0x7b79995e5f793a07bc00c21412e50ecae098e7f9"
      },
      "sc_pool_id": {
        "defaultValue": "1"
      },
      "pool_owner": {
        "defaultValue": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      },
      "ccip_router": {
        "defaultValue": "0xd0daae2231e9cb96b94c8512223533293c3693bf"
      },
      "ccip_token_pool": {
        "defaultValue": "0x9b65749b38278060c5787cce0391ac7f1094c8e8"
      },
      "spot_market_package": {
        "defaultValue": "synthetix-spot-market:3.3.4"
      },
      "perps_market_package": {
        "defaultValue": "synthetix-perps-market:3.3.4"
      },
      "weth_liquidation_reward": {
        "defaultValue": "10000000000000000000"
      },
      "governance_snapshot_record_package": {
        "defaultValue": "synthetix-snapshot-record-mock:3.0.0"
      },
      "governance_package": {
        "defaultValue": "synthetix-governance:3.0.3"
      },
      "governance_salt": {
        "defaultValue": "synthetix-council"
      }
    },
    "invoke": {
      "setMinimumLiquidityRatio": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMinLiquidityRatio(uint256)",
        "args": [
          "<%= settings.minimum_liquidity_ratio %>"
        ],
        "depends": [
          "provision.system",
          "provision.system",
          "provision.system"
        ]
      },
      "setAccountTimeoutWithdraw": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setConfig",
        "args": [
          "<%= formatBytes32String('accountTimeoutWithdraw') %>",
          "<%= hexZeroPad(hexlify(parseInt(settings.account_timeout_withdraw)), 32) %>"
        ],
        "depends": [
          "provision.system",
          "provision.system",
          "provision.system"
        ]
      },
      "setSupportedCrossChainNetworks": {
        "target": [
          "ambassador_council.CoreProxy",
          "grants_council.CoreProxy",
          "spartan_council.CoreProxy",
          "treasury_council.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSupportedCrossChainNetworks",
        "args": [
          [
            "11155111",
            "80001",
            "84531"
          ],
          [
            "16015286601757825753",
            "12532609583862916517",
            "5790810961207155433"
          ]
        ],
        "depends": [
          "provision.system",
          "provision.ambassador_council",
          "provision.grants_council",
          "provision.spartan_council",
          "provision.treasury_council",
          "provision.ambassador_council",
          "provision.grants_council",
          "provision.spartan_council",
          "provision.treasury_council"
        ]
      },
      "permitCreatePool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addToFeatureFlagAllowlist",
        "args": [
          "<%= formatBytes32String('createPool') %>",
          "<%= settings.deployer %>"
        ],
        "depends": [
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system"
        ]
      },
      "registerEthOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          3,
          "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint8'], [settings.eth_aggregator_address, 0, 8]) %>",
          []
        ],
        "extra": {
          "eth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        },
        "depends": [
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system"
        ]
      },
      "configureWethCollateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.weth_address %>",
            "oracleNodeId": "<%= extras.eth_oracle_id %>",
            "issuanceRatioD18": "<%= parseEther('3') %>",
            "liquidationRatioD18": "<%= parseEther('1.5') %>",
            "liquidationRewardD18": "<%= parseEther('0.01') %>",
            "minDelegationD18": "<%= parseEther('0.01') %>",
            "depositingEnabled": true
          }
        ],
        "depends": [
          "invoke.registerEthOracleNode",
          "provision.system",
          "invoke.registerEthOracleNode",
          "provision.system",
          "invoke.registerEthOracleNode",
          "provision.system",
          "invoke.registerEthOracleNode",
          "provision.system",
          "invoke.registerEthOracleNode",
          "provision.system",
          "invoke.registerEthOracleNode",
          "provision.system",
          "invoke.registerEthOracleNode",
          "provision.system",
          "invoke.registerEthOracleNode"
        ]
      },
      "createScPool": {
        "target": [
          "system.CoreProxy"
        ],
        "from": "<%= settings.deployer %>",
        "func": "createPool",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.pool_owner %>"
        ],
        "depends": [
          "invoke.permitCreatePool",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system"
        ]
      },
      "setScPoolName": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "setPoolName",
        "args": [
          "<%= settings.sc_pool_id %>",
          "Spartan Council Pool"
        ],
        "depends": [
          "invoke.createScPool",
          "provision.system",
          "provision.system"
        ]
      },
      "setPreferredPool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setPreferredPool",
        "args": [
          "<%= settings.sc_pool_id %>"
        ],
        "depends": [
          "invoke.createScPool",
          "provision.system",
          "provision.system"
        ]
      },
      "allowAllCreatePool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFeatureFlagAllowAll",
        "args": [
          "<%= formatBytes32String('createPool') %>",
          true
        ],
        "depends": [
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system"
        ]
      },
      "allowAllRegisterMarket": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFeatureFlagAllowAll",
        "args": [
          "<%= formatBytes32String('registerMarket') %>",
          true
        ],
        "depends": [
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system"
        ]
      },
      "configureChainlinkCrossChain": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureChainlinkCrossChain",
        "args": [
          "<%= settings.ccip_router %>",
          "<%= settings.ccip_token_pool %>"
        ],
        "depends": [
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system"
        ]
      },
      "allowAllTransferCrossChain": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFeatureFlagAllowAll",
        "args": [
          "<%= formatBytes32String('transferCrossChain') %>",
          true
        ],
        "depends": [
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system",
          "provision.system"
        ]
      },
      "ambassador_council_setSnapshotContract": {
        "target": [
          "ambassador_council.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSnapshotContract",
        "args": [
          "<%= imports.snapshot_record_mock.contracts.SnapshotRecordMock.address %>",
          true
        ]
      },
      "grants_council_setSnapshotContract": {
        "target": [
          "grants_council.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSnapshotContract",
        "args": [
          "<%= imports.snapshot_record_mock.contracts.SnapshotRecordMock.address %>",
          true
        ]
      },
      "spartan_council_setSnapshotContract": {
        "target": [
          "spartan_council.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSnapshotContract",
        "args": [
          "<%= imports.snapshot_record_mock.contracts.SnapshotRecordMock.address %>",
          true
        ]
      },
      "treasury_council_setSnapshotContract": {
        "target": [
          "treasury_council.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSnapshotContract",
        "args": [
          "<%= imports.snapshot_record_mock.contracts.SnapshotRecordMock.address %>",
          true
        ]
      },
      "unapprove_wrongfully_deployed_snx_pool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "removeApprovedPool",
        "args": [
          "2"
        ]
      }
    },
    "provision": {
      "system": {
        "source": "<%= settings.snx_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "owner": "<%= settings.owner %>",
          "salt": "<%= settings.salt %>",
          "bundleSalt": "<%= settings.bundleSalt %>"
        }
      },
      "ambassador_council": {
        "source": "<%= settings.governance_package %>",
        "options": {
          "salt": "<%= settings.governance_salt %>-ambassador",
          "owner": "<%= settings.owner %>",
          "initial_council_member": "<%= settings.owner %>",
          "council_token_name": "Synthetix Ambassador Council Token",
          "council_token_symbol": "SNXAMB"
        }
      },
      "grants_council": {
        "source": "<%= settings.governance_package %>",
        "options": {
          "salt": "<%= settings.governance_salt %>-grants",
          "owner": "<%= settings.owner %>",
          "initial_council_member": "<%= settings.owner %>",
          "council_token_name": "Synthetix Grants Council Token",
          "council_token_symbol": "SNXGRT"
        }
      },
      "spartan_council": {
        "source": "<%= settings.governance_package %>",
        "options": {
          "salt": "<%= settings.governance_salt %>-spartan",
          "owner": "<%= settings.owner %>",
          "initial_council_member": "<%= settings.owner %>",
          "council_token_name": "Synthetix Spartan Council Token",
          "council_token_symbol": "SNXSPR"
        }
      },
      "treasury_council": {
        "source": "<%= settings.governance_package %>",
        "options": {
          "salt": "<%= settings.governance_salt %>-treasury",
          "owner": "<%= settings.owner %>",
          "initial_council_member": "<%= settings.owner %>",
          "council_token_name": "Synthetix Treasury Council Token",
          "council_token_symbol": "SNXTRY"
        }
      },
      "snapshot_record_mock": {
        "source": "<%= settings.governance_snapshot_record_package %>"
      }
    },
    "name": "synthetix-omnibus",
    "version": "3.3.4-3",
    "description": "Includes the full synthetix system with configurations applied"
  },
  "state": {
    "provision.system": {
      "artifacts": {
        "imports": {
          "system": {
            "url": "ipfs://QmYQs6jFSeT49MjmRotSdyfWS7RSh6Q4FRT4s3xxuEqqQp",
            "tags": [
              "latest"
            ],
            "preset": "main",
            "contracts": {
              "AccountModule": {
                "address": "0x2f743C5eCAA0431c0ebF815960B55aa75831d6AC",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xcc97ef480a0b5a4488b8bacd7bf9cc3dc7346d282df4afa0f9f09ff2e2648e32",
                "sourceName": "contracts/modules/core/AccountModule.sol",
                "contractName": "AccountModule",
                "deployedOn": "contract.AccountModule"
              },
              "AccountTokenModule": {
                "address": "0x019208ef8ec17473bFaa88FA7935145C4958F365",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x41a8be3b7ca121a31c8931cc45cf3f34603d442c69ec082fe6c20578a981a4d0",
                "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                "contractName": "AccountTokenModule",
                "deployedOn": "contract.AccountTokenModule"
              },
              "AssociateDebtModule": {
                "address": "0x66cA806b42F9501f633625f2dC5a8020c427Ac80",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x8ecf71784668b95dffe6f62f356ed5c867fd7971beca22fc45c0d4975763250c",
                "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                "contractName": "AssociateDebtModule",
                "deployedOn": "contract.AssociateDebtModule"
              },
              "AssociatedSystemsModule": {
                "address": "0xCFcA0f42a24Ba15ac9240c7BE013f10e4C24B2FC",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x0de2d7b8687e37f0ad954a330145f9f74c856605db440753cad02f467612c77e",
                "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule"
              },
              "CcipReceiverModule": {
                "address": "0x7088cE8Ce34A1c807a006aba4C8674EecAbe3a5a",
                "abi": [
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error Unauthorized(address addr)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x6e5a5a46c6fc2736850e782acfaa2a6f0af334e6d7db1337954d84a9aa6bbbdf",
                "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                "contractName": "CcipReceiverModule",
                "deployedOn": "contract.CcipReceiverModule"
              },
              "CollateralConfigurationModule": {
                "address": "0x20edf0D7AB02fBAD3dF63140f569ce382c8f2b45",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xa71d2ef68b047244d4e780b698fdb373bc5410a83f409030ad499247ca9c8649",
                "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                "contractName": "CollateralConfigurationModule",
                "deployedOn": "contract.CollateralConfigurationModule"
              },
              "CollateralModule": {
                "address": "0x1821b0d66d72E4a0a85B5B2a2941E76f237552Ba",
                "abi": [
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error AccountNotFound(uint128 accountId)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x29f965111c7091af08f78843163237a3de02f077acaf1bf3bf174eb21e29fc63",
                "sourceName": "contracts/modules/core/CollateralModule.sol",
                "contractName": "CollateralModule",
                "deployedOn": "contract.CollateralModule"
              },
              "CrossChainUSDModule": {
                "address": "0x814406Da03a16cd5eFe7408baFC6FbC4c5E48252",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xa6e37945e35550610e2ffde589546352028fd80c6c868add4b0d5c577d1b4cff",
                "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                "contractName": "CrossChainUSDModule",
                "deployedOn": "contract.CrossChainUSDModule"
              },
              "FeatureFlagModule": {
                "address": "0x343b5efCBf331957d3F4236eb16C338D7256F62D",
                "abi": [
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x5b6b328654b052e96ac1484f740effc4768c2e970af01f6371553101d0d00845",
                "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                "contractName": "FeatureFlagModule",
                "deployedOn": "contract.FeatureFlagModule"
              },
              "InitialModuleBundle": {
                "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/modules/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle"
              },
              "IssueUSDModule": {
                "address": "0xe468E2014363ba6ADe2D7EF0124134D14e8f7Af0",
                "abi": [
                  "error CollateralDepositDisabled(address collateralType)",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PoolNotFound(uint128 poolId)",
                  "event IssuanceFeePaid(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 feeAmount)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x64294d7c166da46b607daafa3107c8eb49fdaeff37ed1f69aae5bfbb4390c442",
                "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                "contractName": "IssueUSDModule",
                "deployedOn": "contract.IssueUSDModule"
              },
              "LiquidationModule": {
                "address": "0x3d3d14869D0C0aB6F2E54f56afC3578B0cF4D564",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error CannotScaleEmptyMapping()",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x1ce13b5294c217e4d93dda41410796c13a369c3bd05deddfca2cab9df8b3ed50",
                "sourceName": "contracts/modules/core/LiquidationModule.sol",
                "contractName": "LiquidationModule",
                "deployedOn": "contract.LiquidationModule"
              },
              "MarketCollateralModule": {
                "address": "0xB50f684D78600A5C06f1E19Fa357Bc5e9A08811F",
                "abi": [
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "error Unauthorized(address addr)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xffc03cb5d0b37a53f6adecf5dce52d6389e4246dc3da6ae12f64693254eaa438",
                "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                "contractName": "MarketCollateralModule",
                "deployedOn": "contract.MarketCollateralModule"
              },
              "MarketManagerModule": {
                "address": "0x378e937d9111F482e6a3D4a1B4D0ef3d93D876Ba",
                "abi": [
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error IncorrectMarketInterface(address market)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xf4a0942cb7078103b4086a8d25e2c5b38f56a7ca499991158624c47a1e0083f3",
                "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                "contractName": "MarketManagerModule",
                "deployedOn": "contract.MarketManagerModule"
              },
              "MulticallModule": {
                "address": "0x0b3310D06e5aaB8bD3c1a08f1c6187DECdFe5c56",
                "abi": [
                  "error DeniedMulticallTarget(address)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error RecursiveMulticall(address)",
                  "error Unauthorized(address addr)",
                  "function getMessageSender() view returns (address)",
                  "function multicall(bytes[] data) returns (bytes[] results)",
                  "function multicallThrough(address[] to, bytes[] data, uint256[] values) payable returns (bytes[] results)",
                  "function setAllowlistedMulticallTarget(address target, bool allowlisted)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xea85c4b95f72582f59f3b1b23edcb08c8c2834e15f980ddef0b0230b670e6602",
                "sourceName": "contracts/modules/core/MulticallModule.sol",
                "contractName": "MulticallModule",
                "deployedOn": "contract.MulticallModule"
              },
              "PoolConfigurationModule": {
                "address": "0x196Cb95C605cD36859DCdA594eEfAD91c21006D3",
                "abi": [
                  "error PoolNotFound(uint128 poolId)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x6e9a4f76f355609aad649ec7e0304b78e1def5e50d9320f30ab88aebfef39ded",
                "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                "contractName": "PoolConfigurationModule",
                "deployedOn": "contract.PoolConfigurationModule"
              },
              "PoolModule": {
                "address": "0x1bF1afA1fAfCaA8a64676dc153e8D8bEd0FDc7fB",
                "abi": [
                  "error CapacityLocked(uint256 marketId)",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "error PoolNotFound(uint128 poolId)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x004d7efdd4c2e33fb44fc8b9702ff2da0c2d0d1e0cc5737abc779b5050bd9cd5",
                "sourceName": "contracts/modules/core/PoolModule.sol",
                "contractName": "PoolModule",
                "deployedOn": "contract.PoolModule"
              },
              "RewardsManagerModule": {
                "address": "0x4bD7854c0aa9A48c2D53BA80ECb446EB87AC4cA1",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error RewardDistributorNotFound()",
                  "error RewardUnavailable(address distributor)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x58f2cb569de544902028ad10cc6f349dbbc9f84544636b0957c7930ccc61d6a1",
                "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                "contractName": "RewardsManagerModule",
                "deployedOn": "contract.RewardsManagerModule"
              },
              "USDTokenModule": {
                "address": "0x4275B8962ac35736aFd87be74C89f31a70269EAc",
                "abi": [
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error Unauthorized(address addr)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x1c30d5319928f8650c95595daff702784fc979836361bece369767f9281996c8",
                "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                "contractName": "USDTokenModule",
                "deployedOn": "contract.USDTokenModule"
              },
              "UtilsModule": {
                "address": "0xc429dd84c9a9a7c786764c7dcaF31e30bd35BcdF",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xf37b79e7f24b4765bc71c1db73f9f51be0181cec4aaa900bcd0029b046f35d69",
                "sourceName": "contracts/modules/core/UtilsModule.sol",
                "contractName": "UtilsModule",
                "deployedOn": "contract.UtilsModule"
              },
              "VaultModule": {
                "address": "0xaB93E0B04f0c3082bfb808C169A9d326bA466423",
                "abi": [
                  "error CapacityLocked(uint256 marketId)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 requestedAmount)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "error PoolNotFound(uint128 poolId)",
                  "error PositionOutOfBounds()",
                  "error RewardDistributorNotFound()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x96004dd6a875e8ef93f455d73330770917b708d6f8075cb03fdec528f00122a5",
                "sourceName": "contracts/modules/core/VaultModule.sol",
                "contractName": "VaultModule",
                "deployedOn": "contract.VaultModule"
              },
              "InitialCoreProxy": {
                "address": "0x76490713314fCEC173f44e99346F54c6e92a8E42",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x828EED723cAF0A8F822249231266E38dF614923C",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xa51700708c4e9697f1cbf01ca82d823835fc1397cf5ac58fd09262c815e9a224",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialCoreProxy"
              },
              "AccountRouter": {
                "address": "0x38fC5D5A5402Cde8cB384c939d201522F0873229",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployedOn": "router.AccountRouter",
                "deployTxnHash": "0xeabfdc111ee65bfa728d79afd19f5ed927fdc6fe746398bb31c4a6577cd2b89f",
                "contractName": "AccountRouter",
                "sourceName": "AccountRouter.sol"
              },
              "CoreRouter": {
                "address": "0xF64b4E28F4B5bF83905694016b2496f5E4e7943b",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error PoolNotFound(uint128 poolId)",
                  "event IssuanceFeePaid(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 feeAmount)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "error CannotScaleEmptyMapping()",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "error IncorrectMarketInterface(address market)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "error DeniedMulticallTarget(address)",
                  "error RecursiveMulticall(address)",
                  "function getMessageSender() view returns (address)",
                  "function multicall(bytes[] data) returns (bytes[] results)",
                  "function multicallThrough(address[] to, bytes[] data, uint256[] values) payable returns (bytes[] results)",
                  "function setAllowlistedMulticallTarget(address target, bool allowlisted)",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)",
                  "error CapacityLocked(uint256 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error RewardDistributorNotFound()",
                  "error RewardUnavailable(address distributor)",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "0x9b19cc85fae49489424e25be0b117270e4c9eae92e6410e9bad1fc5ffc88dc6a",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol"
              },
              "USDRouter": {
                "address": "0xCE7760d0D9Ea15C7CCC06d2D76f34817e0d6bC1A",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployedOn": "router.USDRouter",
                "deployTxnHash": "0x99bf48da8d0f0278ebe6867a1d2e6ea3cb973b87c5fa2d15ae68d0b669b2ab83",
                "contractName": "USDRouter",
                "sourceName": "USDRouter.sol"
              },
              "CoreProxy": {
                "address": "0x76490713314fCEC173f44e99346F54c6e92a8E42",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error PoolNotFound(uint128 poolId)",
                  "event IssuanceFeePaid(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 feeAmount)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "error CannotScaleEmptyMapping()",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "error IncorrectMarketInterface(address market)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "error DeniedMulticallTarget(address)",
                  "error RecursiveMulticall(address)",
                  "function getMessageSender() view returns (address)",
                  "function multicall(bytes[] data) returns (bytes[] results)",
                  "function multicallThrough(address[] to, bytes[] data, uint256[] values) payable returns (bytes[] results)",
                  "function setAllowlistedMulticallTarget(address target, bool allowlisted)",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)",
                  "error CapacityLocked(uint256 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error RewardDistributorNotFound()",
                  "error RewardUnavailable(address distributor)",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_core_proxy"
              },
              "AccountProxy": {
                "address": "0xe487Ad4291019b33e2230F8E2FB1fb6490325260",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_account"
              },
              "USDProxy": {
                "address": "0x1b791d05E437C78039424749243F5A79E747525e",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_usd"
              }
            },
            "imports": {
              "oracle_manager": {
                "url": "ipfs://QmWgKyXt1UWzfeTfF8RR69fHjYaoLYMs1fNoT6MNXCE31k",
                "tags": [
                  "latest"
                ],
                "preset": "with-synthetix",
                "contracts": {
                  "CoreModule": {
                    "address": "0xa9926406647Cc20F9b76644Ea0569E82641B75bB",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x1d43b65ede7bf7998b3a10a62c2e59700360fd4650856a7e2c2f2d204e1800e3",
                    "sourceName": "contracts/modules/CoreModule.sol",
                    "contractName": "CoreModule",
                    "deployedOn": "contract.CoreModule"
                  },
                  "NodeModule": {
                    "address": "0x3924FC7aE841c49a9Ad864A81F95C7A9F4B2706f",
                    "abi": [
                      "error DeviationToleranceExceeded(int256 deviation)",
                      "error InvalidInputPrice()",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "error StalenessToleranceExceeded()",
                      "error UnprocessableNode(bytes32 nodeId)",
                      "error UnsupportedOperation(uint8 operation)",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xbd2f9f5290e6851c60c18c53dced16bee87c46dc36c309c274a44c3300d3e732",
                    "sourceName": "contracts/modules/NodeModule.sol",
                    "contractName": "NodeModule",
                    "deployedOn": "contract.NodeModule"
                  },
                  "InitialProxy": {
                    "address": "0x12aE0D5CD26f212bFE242DA78139d463019f7a73",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0xa9926406647Cc20F9b76644Ea0569E82641B75bB",
                      "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x8406ec4a336218c608cb7aad7a70d51912863b90145a4649d97b65f29724e71a",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialProxy"
                  },
                  "OracleRouter": {
                    "address": "0x4D657c0d33739D322cDB439D65d2D56E8928d3Ea",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error DeviationToleranceExceeded(int256 deviation)",
                      "error InvalidInputPrice()",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "error StalenessToleranceExceeded()",
                      "error UnprocessableNode(bytes32 nodeId)",
                      "error UnsupportedOperation(uint8 operation)",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "deployedOn": "router.OracleRouter",
                    "deployTxnHash": "0x90b48591c8bdda9ad5f4b016eeffd1b64fee2b696a8a1d7930b4c9767a40c4e3",
                    "contractName": "OracleRouter",
                    "sourceName": "OracleRouter.sol"
                  },
                  "Proxy": {
                    "address": "0x12aE0D5CD26f212bFE242DA78139d463019f7a73",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error DeviationToleranceExceeded(int256 deviation)",
                      "error InvalidInputPrice()",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "error StalenessToleranceExceeded()",
                      "error UnprocessableNode(bytes32 nodeId)",
                      "error UnsupportedOperation(uint8 operation)",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "deployTxnHash": "",
                    "sourceName": "",
                    "contractName": "",
                    "deployedOn": "invoke.upgrade_proxy"
                  }
                },
                "txns": {
                  "upgrade_proxy": {
                    "hash": "0xe7594ee2204ef13d51c7895264d06b2c8ac31243f233a0f6290c60a8018ff071",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x12aE0D5CD26f212bFE242DA78139d463019f7a73",
                            "0x4D657c0d33739D322cDB439D65d2D56E8928d3Ea"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_proxy"
                  }
                },
                "extras": {}
              }
            },
            "txns": {
              "register_const_one_oracle": {
                "hash": "0x7f72755a7248a0fbe70a31726901a1c3c2d1e6b37ae163290eb73b579939e6b9",
                "events": {
                  "NodeRegistered": [
                    {
                      "name": "NodeRegistered",
                      "args": [
                        "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                        8,
                        "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                        []
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.register_const_one_oracle"
              },
              "upgrade_core_proxy": {
                "hash": "0x2e61edf7ba784d387d525c2e9beb206ac27917b6d85233ab48c9400c2e200c8c",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x76490713314fCEC173f44e99346F54c6e92a8E42",
                        "0xF64b4E28F4B5bF83905694016b2496f5E4e7943b"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy"
              },
              "enable_basic_features": {
                "hash": "0xb0d5e4f491975a3685bf59425eee5761e195ac6984183146a8ebdcfadb062474",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f73697400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x7769746864726177000000000000000000000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6275726e55736400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6c69717569646174650000000000000000000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x636c61696d526577617264730000000000000000000000000000000000000000",
                        true
                      ]
                    },
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_basic_features"
              },
              "init_account": {
                "hash": "0xa831f9ded3e26468e9b37471af5fd325a0a9f6218fc21c30d1c5259f0455ea39",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                        "0xe487Ad4291019b33e2230F8E2FB1fb6490325260",
                        "0x38fC5D5A5402Cde8cB384c939d201522F0873229"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_account"
              },
              "init_usd": {
                "hash": "0x93b42e3f8a8a527988ea56a72db40f9904c74997900d25fc094acd2be131328e",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x1b791d05E437C78039424749243F5A79E747525e",
                        "0xCE7760d0D9Ea15C7CCC06d2D76f34817e0d6bC1A"
                      ]
                    }
                  ],
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633230000000000000000000000000000000000000000000000000000000",
                        "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                        "0x1b791d05E437C78039424749243F5A79E747525e",
                        "0xCE7760d0D9Ea15C7CCC06d2D76f34817e0d6bC1A"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_usd"
              },
              "set_oracle_manager": {
                "hash": "0xd746d888437a4cb111eb878e2c53607a45058c67cecfd71ed45f3f11b7d5a74b",
                "events": {},
                "deployedOn": "invoke.set_oracle_manager"
              },
              "configure_usd_collateral": {
                "hash": "0xd2db461ff554b7c4c5ed014060a55bb9b92dd3560b34435c1bd6d3b0094fca39",
                "events": {
                  "CollateralConfigured": [
                    {
                      "name": "CollateralConfigured",
                      "args": [
                        "0x1b791d05E437C78039424749243F5A79E747525e",
                        [
                          true,
                          {
                            "type": "BigNumber",
                            "hex": "0x8ac7230489e80000"
                          },
                          {
                            "type": "BigNumber",
                            "hex": "0x8ac7230489e80000"
                          },
                          {
                            "type": "BigNumber",
                            "hex": "0x00"
                          },
                          "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                          "0x1b791d05E437C78039424749243F5A79E747525e",
                          {
                            "type": "BigNumber",
                            "hex": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                          }
                        ]
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.configure_usd_collateral"
              }
            },
            "extras": {
              "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733"
            }
          }
        }
      },
      "hash": "753d7c8dd70082ab4b65b2a04ea190e3",
      "version": 6
    },
    "invoke.registerWethOracleManager": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerWethOracleManager": {
            "hash": "0xdb9da9f065c8b52aa087d789705906b04c5791b6aecd3eaf322730117cda0bc0",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa1ad04e5fe674fe144be389adb9340f0b15e73d866da4e70145eec4ef867955b",
                    3,
                    "0x000000000000000000000000694aa1769357215de4fac081bf1f309adc32530600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerWethOracleManager"
          }
        },
        "extras": {
          "weth_oracle_id": "0xa1ad04e5fe674fe144be389adb9340f0b15e73d866da4e70145eec4ef867955b"
        }
      },
      "hash": "b4055c72302a57d1415b0f1a6798f7c4",
      "version": 5
    },
    "invoke.configureWethCollateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configureWethCollateral": {
            "hash": "0x5989984c14c20d10d98910c74c2605bf71de005d7c2f814de6f06ef79587c0e3",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",
                    [
                      true,
                      {
                        "type": "BigNumber",
                        "hex": "0x29a2241af62c0000"
                      },
                      {
                        "type": "BigNumber",
                        "hex": "0x14d1120d7b160000"
                      },
                      {
                        "type": "BigNumber",
                        "hex": "0x2386f26fc10000"
                      },
                      "0xa1ad04e5fe674fe144be389adb9340f0b15e73d866da4e70145eec4ef867955b",
                      "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",
                      {
                        "type": "BigNumber",
                        "hex": "0x2386f26fc10000"
                      }
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configureWethCollateral"
          }
        },
        "extras": {}
      },
      "hash": "7f9fa59670f979ce68c7197db19113eb",
      "version": 6
    },
    "invoke.setAccountTimeoutWithdraw": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setAccountTimeoutWithdraw": {
            "hash": "0x318dbc8d6abea0dfadda21b471d43557db94d9bac7afd3c25f0cf424a4e6f7c3",
            "events": {},
            "deployedOn": "invoke.setAccountTimeoutWithdraw"
          }
        },
        "extras": {}
      },
      "hash": "b23920a915b5a9d085f266c27bf44d73",
      "version": 6
    },
    "invoke.setMinimumLiquidityRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setMinimumLiquidityRatio": {
            "hash": "0xd241286950cf109a0c0b4cb8ee376f63f0ef20278db6f9ec844078691f51f7c8",
            "events": {
              "SetMinLiquidityRatio": [
                {
                  "name": "SetMinLiquidityRatio",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x1bc16d674ec80000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setMinimumLiquidityRatio"
          }
        },
        "extras": {}
      },
      "hash": "a26212a0396ea24082e7a6838ed3c850",
      "version": 6
    },
    "invoke.permitCreatePool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "permitCreatePool": {
            "hash": "0x1dd4315c9c682be97a780cb44a9942a5b4dbcf09b2ae8928e1b2389a1e55249e",
            "events": {
              "FeatureFlagAllowlistAdded": [
                {
                  "name": "FeatureFlagAllowlistAdded",
                  "args": [
                    "0x637265617465506f6f6c00000000000000000000000000000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.permitCreatePool"
          }
        },
        "extras": {}
      },
      "hash": "70c840a86b4ed272c76be85b91913856",
      "version": 6
    },
    "invoke.createScPool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createScPool": {
            "hash": "0x810150b39d99dad793efcfc18475c60ab4e2e40b88ad00b4b79f5d6bfa00a559",
            "events": {
              "PoolCreated": [
                {
                  "name": "PoolCreated",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x01"
                    },
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createScPool"
          }
        },
        "extras": {}
      },
      "hash": "08142486abd3c8b21a2bdafafa8072f9",
      "version": 6
    },
    "invoke.setPreferredPool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPreferredPool": {
            "hash": "0x567c892eae7905583f44ded04f924dd87be2829b48c3af323c587382dec4f9a3",
            "events": {
              "PreferredPoolSet": [
                {
                  "name": "PreferredPoolSet",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x01"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPreferredPool"
          }
        },
        "extras": {}
      },
      "hash": "480e6beb1993cfe6612decbb89f15bd7",
      "version": 6
    },
    "invoke.allowAllCreatePool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "allowAllCreatePool": {
            "hash": "0xbde34f5f0643836b72ef1ba26e096674969df9cfc2ac4279c0131de90730c321",
            "events": {
              "FeatureFlagAllowAllSet": [
                {
                  "name": "FeatureFlagAllowAllSet",
                  "args": [
                    "0x637265617465506f6f6c00000000000000000000000000000000000000000000",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.allowAllCreatePool"
          }
        },
        "extras": {}
      },
      "hash": "77be7e4c2dfbe7c63fecc75470d6cf08",
      "version": 6
    },
    "invoke.allowAllRegisterMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "allowAllRegisterMarket": {
            "hash": "0x91c4754f917bb051e82ba79588ee397029715b98c1c772e7e4eaf19a2b381047",
            "events": {
              "FeatureFlagAllowAllSet": [
                {
                  "name": "FeatureFlagAllowAllSet",
                  "args": [
                    "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.allowAllRegisterMarket"
          }
        },
        "extras": {}
      },
      "hash": "b2dcf760f92a51f5e3b54ed100ad8cbf",
      "version": 6
    },
    "invoke.registerEthOracleManager": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerEthOracleManager": {
            "hash": "0x5afb29c1c93662fbf3d0184476c5a68cc058e875a5e8159d9d80a7dd45aabb53",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x9b9959dfd5ba62b3332fcc78c554714e336dea93322ee9f03eef2755b7849cd2",
                    3,
                    "0x000000000000000000000000694aa1769357215de4fac081bf1f309adc32530600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerEthOracleManager"
          }
        },
        "extras": {
          "eth_oracle_id": "0x9b9959dfd5ba62b3332fcc78c554714e336dea93322ee9f03eef2755b7849cd2"
        }
      },
      "hash": "a4ef991fe5d4edd91e60e9c7f7802660",
      "version": 5
    },
    "invoke.setScPoolName": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setScPoolName": {
            "hash": "0xe58ebce28a9081be9fe41747ec66d0c00b12018ded42b35f79012b6319460407",
            "events": {
              "PoolNameUpdated": [
                {
                  "name": "PoolNameUpdated",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x01"
                    },
                    "Spartan Council Pool",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setScPoolName"
          }
        },
        "extras": {}
      },
      "hash": "865e58ccf82574cd9b7679d764446754",
      "version": 6
    },
    "invoke.registerEthOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerEthOracleNode": {
            "hash": "0x7b4a48e8c58d960193268e12d585a86ae085365b812225848c01bcb6d5fcecac",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa1ad04e5fe674fe144be389adb9340f0b15e73d866da4e70145eec4ef867955b",
                    3,
                    "0x000000000000000000000000694aa1769357215de4fac081bf1f309adc32530600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerEthOracleNode"
          }
        },
        "extras": {
          "eth_oracle_id": "0xa1ad04e5fe674fe144be389adb9340f0b15e73d866da4e70145eec4ef867955b"
        }
      },
      "hash": "a3005d4c9fc0225f9cabc1120aaad055",
      "version": 6
    },
    "invoke.configureChainlinkCrossChain": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configureChainlinkCrossChain": {
            "hash": "0xf4bfcc9b6f09c6e8f40ea105d01f7596a1206ea7c1ecc97bc0379e6ce4f1df8b",
            "events": {
              "AssociatedSystemSet": [
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x756e6d616e616765640000000000000000000000000000000000000000000000",
                    "0x63636970436861696e6c696e6b53656e64000000000000000000000000000000",
                    "0xD0daae2231E9CB96b94C8512223533293C3693Bf",
                    "0xD0daae2231E9CB96b94C8512223533293C3693Bf"
                  ]
                },
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x756e6d616e616765640000000000000000000000000000000000000000000000",
                    "0x63636970436861696e6c696e6b52656376000000000000000000000000000000",
                    "0xD0daae2231E9CB96b94C8512223533293C3693Bf",
                    "0xD0daae2231E9CB96b94C8512223533293C3693Bf"
                  ]
                },
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x756e6d616e616765640000000000000000000000000000000000000000000000",
                    "0x63636970436861696e6c696e6b546f6b656e506f6f6c00000000000000000000",
                    "0x9B65749b38278060C5787Cce0391AC7f1094C8E8",
                    "0x9B65749b38278060C5787Cce0391AC7f1094C8E8"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configureChainlinkCrossChain"
          }
        },
        "extras": {}
      },
      "hash": "805486600a421a0c42dffbefbc1699ca",
      "version": 6
    },
    "invoke.setSupportedCrossChainNetworks": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setSupportedCrossChainNetworks_ambassador_council.CoreProxy": {
            "hash": "0xfec94a69c5c54d292877258b07d20f7caf0398574e8ee247b65bfde5f1684eb3",
            "events": {
              "NewSupportedCrossChainNetwork": [
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0xaa36a7"
                    }
                  ]
                },
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x013881"
                    }
                  ]
                },
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x014a33"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setSupportedCrossChainNetworks",
            "gasUsed": 331437,
            "gasCost": "5565495429",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          },
          "setSupportedCrossChainNetworks_grants_council.CoreProxy": {
            "hash": "0xb76595ca394774c7a5045c515b3df9182177f3bbb79a690a302b7ba24a9f4d07",
            "events": {
              "NewSupportedCrossChainNetwork": [
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0xaa36a7"
                    }
                  ]
                },
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x013881"
                    }
                  ]
                },
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x014a33"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setSupportedCrossChainNetworks",
            "gasUsed": 331437,
            "gasCost": "5239273133",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          },
          "setSupportedCrossChainNetworks_spartan_council.CoreProxy": {
            "hash": "0x7566ac4d92e4ee27ef72a6a2018975ac35a25271e89d28a00fdd440c2a7a10c0",
            "events": {
              "NewSupportedCrossChainNetwork": [
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0xaa36a7"
                    }
                  ]
                },
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x013881"
                    }
                  ]
                },
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x014a33"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setSupportedCrossChainNetworks",
            "gasUsed": 331437,
            "gasCost": "5593670856",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          },
          "setSupportedCrossChainNetworks_treasury_council.CoreProxy": {
            "hash": "0x0924b8e4dc3644b31c38a0c1f33d0d85fd59af6f94c4b41fb481aa2ec65ca305",
            "events": {
              "NewSupportedCrossChainNetwork": [
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0xaa36a7"
                    }
                  ]
                },
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x013881"
                    }
                  ]
                },
                {
                  "name": "NewSupportedCrossChainNetwork",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x014a33"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setSupportedCrossChainNetworks",
            "gasUsed": 331437,
            "gasCost": "5380723238",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "c1e6017dc59c3e240b9e2e4d3977e0ea",
      "version": 6
    },
    "invoke.allowAllTransferCrossChain": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "allowAllTransferCrossChain": {
            "hash": "0xff6d814717101ab5fa9610456bc035fea59fb0617b1b25e9da3777a2cc6f0a41",
            "events": {
              "FeatureFlagAllowAllSet": [
                {
                  "name": "FeatureFlagAllowAllSet",
                  "args": [
                    "0x7472616e7366657243726f7373436861696e0000000000000000000000000000",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.allowAllTransferCrossChain"
          }
        },
        "extras": {}
      },
      "hash": "c511466719bfeaab1dcd85a746cfd559",
      "version": 6
    },
    "invoke.create_snx_pool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "create_snx_pool": {
            "hash": "0x7ed297bfc11e651633027596d808ba565e76442979687bb3f8c774fa0fe4adeb",
            "events": {
              "PoolCreated": [
                {
                  "name": "PoolCreated",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x02"
                    },
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.create_snx_pool"
          }
        },
        "extras": {}
      },
      "hash": "8d35c04416940cdc117b8b513602f41f",
      "version": 6
    },
    "invoke.approve_snx_pool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "approve_snx_pool": {
            "hash": "0x6c4a18c98a4a918865deb1a06cace56364a4326c4c5bcf78f38e6f082bfc5603",
            "events": {
              "PoolApprovedAdded": [
                {
                  "name": "PoolApprovedAdded",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x02"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.approve_snx_pool"
          }
        },
        "extras": {}
      },
      "hash": "11394d965dc5a1067034e2a73b3c5400",
      "version": 6
    },
    "invoke.set_snx_pool_name": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "set_snx_pool_name": {
            "hash": "0x3c25514041ba41a37db0b647596634b5d1b3a0e598837f58bb6db853fe6f2836",
            "events": {
              "PoolNameUpdated": [
                {
                  "name": "PoolNameUpdated",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x02"
                    },
                    "Passive SNX Pool",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.set_snx_pool_name"
          }
        },
        "extras": {}
      },
      "hash": "1e37409846a57ac9fc8631278bf6e276",
      "version": 6
    },
    "provision.ambassador_council": {
      "artifacts": {
        "imports": {
          "ambassador_council": {
            "url": "ipfs://QmdN6ZCgMD6rbDEuwruDqzF8Amf9WLsPVfAapadZFLh4m9",
            "tags": [
              "latest"
            ],
            "preset": "with-synthetix-omnibus",
            "contracts": {
              "AssociatedSystemsModule": {
                "address": "0x2D0E0c70d3711E36fD3e3d97f3018f0961CF7431",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xc1037c1da14870fb7af771a4deda67c75ca3daaf91f5bef3eb93435be63c408e",
                "sourceName": "contracts/modules/core/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877177,
                "gasCost": "5384177997"
              },
              "CcipReceiverModule": {
                "address": "0xD3Df4aa5246d16646f2aC13255A263E93F139506",
                "abi": [
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error Unauthorized(address addr)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xab8181dfce4daef1fa7f8fbf0ee299496675d8f01fb0ae90e3992a9417595e51",
                "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                "contractName": "CcipReceiverModule",
                "deployedOn": "contract.CcipReceiverModule",
                "gasUsed": 494281,
                "gasCost": "5279886099"
              },
              "CouncilTokenModule": {
                "address": "0xc068D7E918a95de3864BcC4Ca17457971F1240bB",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x9e105a645586096eda04db2b8fa1ff00ecd0ddafaa3873fced35532df5c0e40c",
                "sourceName": "contracts/modules/council-nft/CouncilTokenModule.sol",
                "contractName": "CouncilTokenModule",
                "deployedOn": "contract.CouncilTokenModule",
                "gasUsed": 1669255,
                "gasCost": "5242099897"
              },
              "CrossChainModule": {
                "address": "0x0a82fEC380F683c3b86e4776f6cD5F6B20596b0d",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x674b89027576f25dd53a25a538ec7ca68ff0af3ae665d6322bd1ee6284e02507",
                "sourceName": "contracts/modules/core/CrossChainModule.sol",
                "contractName": "CrossChainModule",
                "deployedOn": "contract.CrossChainModule",
                "gasUsed": 433366,
                "gasCost": "5184015169"
              },
              "ElectionInspectorModule": {
                "address": "0x76D6aEc5eFe9BE390E7F461F024fF2385269Caac",
                "abi": [
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x5a3bc3b154af5c4f189e8f0ef2b4b9b0a725709e7397373459ee22b32a43400c",
                "sourceName": "contracts/modules/core/ElectionInspectorModule.sol",
                "contractName": "ElectionInspectorModule",
                "deployedOn": "contract.ElectionInspectorModule",
                "gasUsed": 348680,
                "gasCost": "5609845706"
              },
              "ElectionModule": {
                "address": "0x841c1C6C453e9D1F5f439DD8E60E33ee96164b2A",
                "abi": [
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x3c63afe18c3b843096b154b1b1177d07af38d860762e0524056ab2b46fc83ec5",
                "sourceName": "contracts/modules/core/ElectionModule.sol",
                "contractName": "ElectionModule",
                "deployedOn": "contract.ElectionModule",
                "gasUsed": 3998177,
                "gasCost": "1717510069"
              },
              "InitialModuleBundle": {
                "address": "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/modules/core/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "SnapshotVotePowerModule": {
                "address": "0xb615e9F26a23e96bDE1CDA45cA3fEBC609418ef2",
                "abi": [
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error NotCallableInCurrentPeriod()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "error Unauthorized(address addr)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x0ee7d67d1db37024aeeb90ef6405da73f28953e5630bc4c186dc9eb2320e3358",
                "sourceName": "contracts/modules/core/SnapshotVotePowerModule.sol",
                "contractName": "SnapshotVotePowerModule",
                "deployedOn": "contract.SnapshotVotePowerModule",
                "gasUsed": 654596,
                "gasCost": "6542681869"
              },
              "InitialProxy": {
                "address": "0x9abCc1d560C1af4Cf8a84D80AE5E35a24C1f38FA",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x0903b8022ca1ab52a25c45dc78f45e19dd4f7c72d241d4abcec25c50511ea5a3",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 185358,
                "gasCost": "6706057890"
              },
              "CoreRouter": {
                "address": "0x89CB5446B63f4A7807928Ef504ED501A6b18Ec3d",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)",
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "0x836f73c82ea5db18f46d4509d7a6279b9e7a002d6845ef997cd139b901c74b36",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 682369,
                "gasCost": "1723826903"
              },
              "CouncilTokenRouter": {
                "address": "0x6ae2597A90C94999566031655b7C388cCF8283C5",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CouncilTokenRouter",
                "deployTxnHash": "0x5dd7c6991a6c04b6ccbcf19da661a61a9073690a57f8e5ecee1517bb9d5bfd5d",
                "contractName": "CouncilTokenRouter",
                "sourceName": "CouncilTokenRouter.sol",
                "gasUsed": 403596,
                "gasCost": "5879725532"
              },
              "CoreProxy": {
                "address": "0x9abCc1d560C1af4Cf8a84D80AE5E35a24C1f38FA",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)",
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "CouncilToken": {
                "address": "0x2E1cC766D5C8193fF719Eb6199066578543AAF8c",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 0,
                "gasCost": "0"
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://Qmcc4bRWfcLuY2WyDgYSo5WRBtW4y118ju54uTdDi8r6W9",
                "tags": [
                  "latest"
                ],
                "preset": "with-synthetix-governance",
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xe7757d76f199446897eb84d239675e310db7bd1785d3d28369d44dc46c550877",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 2033737,
                    "gasCost": "6286047662"
                  }
                }
              }
            },
            "txns": {
              "upgrade_core_proxy": {
                "hash": "0xa52dfd5e8833ab5ace08b4621866e8be87b4b0651685372e7e8291c56830ae3c",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x9abCc1d560C1af4Cf8a84D80AE5E35a24C1f38FA",
                        "0x89CB5446B63f4A7807928Ef504ED501A6b18Ec3d"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 51150,
                "gasCost": "1729041631",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_council_token": {
                "hash": "0xa9270bb18054be53dc004bf54803399705b21bfd9c6d2970e250988518abcf2a",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x636f756e63696c546f6b656e0000000000000000000000000000000000000000",
                        "0x2E1cC766D5C8193fF719Eb6199066578543AAF8c",
                        "0x6ae2597A90C94999566031655b7C388cCF8283C5"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 399807,
                "gasCost": "6036429199",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_election_module": {
                "hash": "0x56844503f73bfb34439b415118708145732806834ebdf7695e6f36e7a3a3f6d0",
                "events": {
                  "Transfer": [
                    {
                      "name": "Transfer",
                      "args": [
                        "0x0000000000000000000000000000000000000000",
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                        {
                          "type": "BigNumber",
                          "hex": "0x48914229dedd5a9922f44441ffccfc2cb7856ee9"
                        }
                      ]
                    }
                  ],
                  "CouncilMemberAdded": [
                    {
                      "name": "CouncilMemberAdded",
                      "args": [
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                        {
                          "type": "BigNumber",
                          "hex": "0x00"
                        }
                      ]
                    }
                  ],
                  "ElectionModuleInitialized": [
                    {
                      "name": "ElectionModuleInitialized",
                      "args": []
                    }
                  ],
                  "EpochStarted": [
                    {
                      "name": "EpochStarted",
                      "args": [
                        {
                          "type": "BigNumber",
                          "hex": "0x00"
                        }
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_election_module",
                "gasUsed": 393066,
                "gasCost": "5653853704",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              }
            },
            "extras": {}
          }
        }
      },
      "hash": "ca75faa7e3be90d91ef7b4ce0259ef22",
      "version": 6
    },
    "provision.grants_council": {
      "artifacts": {
        "imports": {
          "grants_council": {
            "url": "ipfs://QmczyYvP7c2VGHj4xKEdiD7NCrdL9KnHuD3ettnGUywnDS",
            "tags": [
              "latest"
            ],
            "preset": "with-synthetix-omnibus",
            "contracts": {
              "AssociatedSystemsModule": {
                "address": "0x73d7fC96547eECCb3121dA7c0661554BE3e49236",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x8f9434ba48295f5eae8e07b6a8558327340ee295298f57c189b8d6846f70f2fd",
                "sourceName": "contracts/modules/core/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877177,
                "gasCost": "6182009736"
              },
              "CcipReceiverModule": {
                "address": "0xA584bCE07004E17C246a7082aB680616853f3890",
                "abi": [
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error Unauthorized(address addr)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xf84d950c6335120ce20f391464ca29179bb8b042b10d341ccd0a8f3e3ce0a3f2",
                "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                "contractName": "CcipReceiverModule",
                "deployedOn": "contract.CcipReceiverModule",
                "gasUsed": 494281,
                "gasCost": "5816605310"
              },
              "CouncilTokenModule": {
                "address": "0x5e06cFd50Ace8DC98B66dB6FD39061C96425B8C6",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x0b0d4531c8c02f366bb3d3ff241a05092895e102983b98e29840fe2d4081b118",
                "sourceName": "contracts/modules/council-nft/CouncilTokenModule.sol",
                "contractName": "CouncilTokenModule",
                "deployedOn": "contract.CouncilTokenModule",
                "gasUsed": 1669255,
                "gasCost": "6105159735"
              },
              "CrossChainModule": {
                "address": "0xfb82B564F84c4e050c4D0B4E889731736b564e4E",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x306e2457e3d5ba915eefb1526e97c6691a55766bba9c24e696779fa89f239a1f",
                "sourceName": "contracts/modules/core/CrossChainModule.sol",
                "contractName": "CrossChainModule",
                "deployedOn": "contract.CrossChainModule",
                "gasUsed": 433366,
                "gasCost": "6487091959"
              },
              "ElectionInspectorModule": {
                "address": "0x187f886F762382E65abA3d67fd1f15E7F1288991",
                "abi": [
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x0459d7521c99add51d2267943d458fbd92ac6cdfddf83b95cfdb6b079e2c4f31",
                "sourceName": "contracts/modules/core/ElectionInspectorModule.sol",
                "contractName": "ElectionInspectorModule",
                "deployedOn": "contract.ElectionInspectorModule",
                "gasUsed": 348680,
                "gasCost": "6681566569"
              },
              "ElectionModule": {
                "address": "0x1D4A9D394A1F2C49E44E7bCB3A38d70374A53d01",
                "abi": [
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xbdbc53ed1903ff246d3509096f60e2803f8c0de59a4f3c67c7e3d6b0999972af",
                "sourceName": "contracts/modules/core/ElectionModule.sol",
                "contractName": "ElectionModule",
                "deployedOn": "contract.ElectionModule",
                "gasUsed": 3998177,
                "gasCost": "1741704018"
              },
              "InitialModuleBundle": {
                "address": "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/modules/core/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "SnapshotVotePowerModule": {
                "address": "0x938C16e55e1f24AAbCA2217A4C7F1c772B8993E4",
                "abi": [
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error NotCallableInCurrentPeriod()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "error Unauthorized(address addr)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xcceb58248735d4c7551a90412fc885c3f8823058d5ed41e5300d6f59cfda3aab",
                "sourceName": "contracts/modules/core/SnapshotVotePowerModule.sol",
                "contractName": "SnapshotVotePowerModule",
                "deployedOn": "contract.SnapshotVotePowerModule",
                "gasUsed": 654596,
                "gasCost": "6199710767"
              },
              "InitialProxy": {
                "address": "0x8A3bA910172c4b77BF4c52d04bA1a59b963700ec",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x62a5b0176e66e61cfea52f93fac03a2844472ba950d2fecc87be7d0bcef7ae43",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 185358,
                "gasCost": "5997056821"
              },
              "CoreRouter": {
                "address": "0xb4B97E3Fe080F00c042CF331aa899a9595240Fbc",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)",
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "0x5ed200a2dba924df25d4af5188973ff29fe3362af128a4c923a3c19c9c3c81c2",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 682357,
                "gasCost": "1747353374"
              },
              "CouncilTokenRouter": {
                "address": "0x5f06a14BC2d2B895F4cD4820BFd034f90a711755",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CouncilTokenRouter",
                "deployTxnHash": "0x3655c037ccd7848f916854064f33728732c031643a72a7ca36f4cecc4077d85a",
                "contractName": "CouncilTokenRouter",
                "sourceName": "CouncilTokenRouter.sol",
                "gasUsed": 403596,
                "gasCost": "5467168879"
              },
              "CoreProxy": {
                "address": "0x8A3bA910172c4b77BF4c52d04bA1a59b963700ec",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)",
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "CouncilToken": {
                "address": "0x3ad4862332808a3a71D8d5E536108255D699ce42",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 0,
                "gasCost": "0"
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmfELRiwi5Ap12uLd72f6yJXJAGQxkjhFyDr77EWz9kgAp",
                "tags": [
                  "latest"
                ],
                "preset": "with-synthetix-governance",
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                }
              }
            },
            "txns": {
              "upgrade_core_proxy": {
                "hash": "0x133fd81af36773030a333b096e38b3a2201db6769d6587865825cedd4f6f1ec1",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x8A3bA910172c4b77BF4c52d04bA1a59b963700ec",
                        "0xb4B97E3Fe080F00c042CF331aa899a9595240Fbc"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 51150,
                "gasCost": "1743808172",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_council_token": {
                "hash": "0x24f8ab3522a9f856ba29d46b883db52dfac67b2a3e5217a5cab2a68a3560a0e4",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x636f756e63696c546f6b656e0000000000000000000000000000000000000000",
                        "0x3ad4862332808a3a71D8d5E536108255D699ce42",
                        "0x5f06a14BC2d2B895F4cD4820BFd034f90a711755"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 355133,
                "gasCost": "5297271662",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_election_module": {
                "hash": "0x5ea37340b300538c57f6cb767f15ca072f393c390014ccdabdd6db4744e8d783",
                "events": {
                  "Transfer": [
                    {
                      "name": "Transfer",
                      "args": [
                        "0x0000000000000000000000000000000000000000",
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                        {
                          "type": "BigNumber",
                          "hex": "0x48914229dedd5a9922f44441ffccfc2cb7856ee9"
                        }
                      ]
                    }
                  ],
                  "CouncilMemberAdded": [
                    {
                      "name": "CouncilMemberAdded",
                      "args": [
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                        {
                          "type": "BigNumber",
                          "hex": "0x00"
                        }
                      ]
                    }
                  ],
                  "ElectionModuleInitialized": [
                    {
                      "name": "ElectionModuleInitialized",
                      "args": []
                    }
                  ],
                  "EpochStarted": [
                    {
                      "name": "EpochStarted",
                      "args": [
                        {
                          "type": "BigNumber",
                          "hex": "0x00"
                        }
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_election_module",
                "gasUsed": 393066,
                "gasCost": "5159410059",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              }
            },
            "extras": {}
          }
        }
      },
      "hash": "c0145c4a758c05f25fc4466d698b59d6",
      "version": 6
    },
    "provision.snapshot_record_mock": {
      "artifacts": {
        "imports": {
          "snapshot_record_mock": {
            "url": "ipfs://QmcZPNntqA1eL8uqmj3ZDAFUDre4xehNAgZubQMaoyjAfa",
            "tags": [
              "latest"
            ],
            "preset": "with-synthetix-omnibus",
            "contracts": {
              "SnapshotRecordMock": {
                "address": "0x854AeE030eFEB8f9C4c778999174A33921613A4F",
                "abi": [
                  "function balanceOfOnPeriod(address user, uint128 periodId) view returns (uint256)",
                  "function setBalanceOfOnPeriod(address user, uint256 balance, uint256 periodId)",
                  "function setTotalSupplyOnPeriod(uint128 snapshotId, uint256 totalSupply)",
                  "function takeSnapshot(uint128 snapshotId)",
                  "function totalSupplyOnPeriod(uint128) pure returns (uint256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xb36d31d3686c4490c8552b0ff497179b8fa0888284f80db0cb34e1c7e6e07481",
                "sourceName": "contracts/mocks/SnapshotRecordMock.sol",
                "contractName": "SnapshotRecordMock",
                "deployedOn": "contract.SnapshotRecordMock",
                "gasUsed": 182566,
                "gasCost": "5610486301"
              }
            }
          }
        }
      },
      "hash": "ce88aa2955d1aacbd8d5217c64499519",
      "version": 6
    },
    "provision.spartan_council": {
      "artifacts": {
        "imports": {
          "spartan_council": {
            "url": "ipfs://QmVAR8KuedCc5cS8kJGVfryRLskYvto6FPCKYL1b5kDRr1",
            "tags": [
              "latest"
            ],
            "preset": "with-synthetix-omnibus",
            "contracts": {
              "AssociatedSystemsModule": {
                "address": "0xC80c36e9437c188a326B65627d4FA70C42c11784",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x4778b4c15949cbe5aa0c76687e660535a769ea397d876cb85777ae508e9dcfc0",
                "sourceName": "contracts/modules/core/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877177,
                "gasCost": "5590460217"
              },
              "CcipReceiverModule": {
                "address": "0x1881c0536909593484719E60aDcB9A1D26aeF8c4",
                "abi": [
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error Unauthorized(address addr)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xbee60b520be965190285d383241d1e6ece6354c3baa18ac08841d1a0c07e4c6d",
                "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                "contractName": "CcipReceiverModule",
                "deployedOn": "contract.CcipReceiverModule",
                "gasUsed": 494281,
                "gasCost": "5881507070"
              },
              "CouncilTokenModule": {
                "address": "0xa5C000df297D98c034eCDFe3C6A7D4572CF8178f",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xe5432fc2ad5e220596ef4fd3f0166bc534875f4b4efba7382f6d51d963d2d52e",
                "sourceName": "contracts/modules/council-nft/CouncilTokenModule.sol",
                "contractName": "CouncilTokenModule",
                "deployedOn": "contract.CouncilTokenModule",
                "gasUsed": 1669255,
                "gasCost": "5318053530"
              },
              "CrossChainModule": {
                "address": "0xB0c464D4f18CfbCc1F81394d6AD73Afe99883F42",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xbe68ee30400991690f36153bec3047a93be280472a032fcff1e7c37e7d2982e6",
                "sourceName": "contracts/modules/core/CrossChainModule.sol",
                "contractName": "CrossChainModule",
                "deployedOn": "contract.CrossChainModule",
                "gasUsed": 433366,
                "gasCost": "5641141846"
              },
              "ElectionInspectorModule": {
                "address": "0x2807Fe73D4C8D668407da04B9443a86b9883a10a",
                "abi": [
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xd51402f59323eea5a18b1275da232c7d2b01d41d9c28936eb199775ae945f585",
                "sourceName": "contracts/modules/core/ElectionInspectorModule.sol",
                "contractName": "ElectionInspectorModule",
                "deployedOn": "contract.ElectionInspectorModule",
                "gasUsed": 348680,
                "gasCost": "5321465784"
              },
              "ElectionModule": {
                "address": "0xD6f533DED7045D90954Bb92D6F888bb7d0e1f585",
                "abi": [
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x5218ebe5ace3a67a2569b74c2495fe7967d4ef1386aed2f132e2f6de8adbf773",
                "sourceName": "contracts/modules/core/ElectionModule.sol",
                "contractName": "ElectionModule",
                "deployedOn": "contract.ElectionModule",
                "gasUsed": 3998177,
                "gasCost": "1741092300"
              },
              "InitialModuleBundle": {
                "address": "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/modules/core/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "SnapshotVotePowerModule": {
                "address": "0x065a3BfB470D63d4D806D39670caB4Fe2DE2DcEb",
                "abi": [
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error NotCallableInCurrentPeriod()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "error Unauthorized(address addr)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xd495b9065d5683f5927820168cf499cd2afa0f292a7eceec77c728e3123d9c3e",
                "sourceName": "contracts/modules/core/SnapshotVotePowerModule.sol",
                "contractName": "SnapshotVotePowerModule",
                "deployedOn": "contract.SnapshotVotePowerModule",
                "gasUsed": 654596,
                "gasCost": "5280977627"
              },
              "InitialProxy": {
                "address": "0xDAA5A8bFDEBcA03cCAF0d5285265A7d7Fbb42e15",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x0ee8f49f0e359aac403917048cfe95c3856c7a302430517e6f394c42fe014414",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 185358,
                "gasCost": "5121260164"
              },
              "CoreRouter": {
                "address": "0x0f9A59c985B28fb98f63380566e4e07800246689",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)",
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "0x185e45a6ebcc3727b3afe232a55f5ab989071b24d7e9a311cc36ea643f22ec8f",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 682369,
                "gasCost": "1739995238"
              },
              "CouncilTokenRouter": {
                "address": "0xBc55541e23c5458Bfc625dd331EBa6C756e30290",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CouncilTokenRouter",
                "deployTxnHash": "0x59e81c72396591e326fb9c7339f76397cf0ff0a9b0ecce6da1d52959b3f0131a",
                "contractName": "CouncilTokenRouter",
                "sourceName": "CouncilTokenRouter.sol",
                "gasUsed": 403320,
                "gasCost": "5241557384"
              },
              "CoreProxy": {
                "address": "0xDAA5A8bFDEBcA03cCAF0d5285265A7d7Fbb42e15",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)",
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "CouncilToken": {
                "address": "0x4feeC0B35b395feD7BC662ee32D185B194Ea9BD6",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 0,
                "gasCost": "0"
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmfE7r6mN6VWLWJvtzXi3bxW9Dzed8EFhkc8S24c6EWWHD",
                "tags": [
                  "latest"
                ],
                "preset": "with-synthetix-governance",
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                }
              }
            },
            "txns": {
              "upgrade_core_proxy": {
                "hash": "0x382da155a8966129f0e221cd656c90f58353fc0c18963acff3c4fd0f794c31a3",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0xDAA5A8bFDEBcA03cCAF0d5285265A7d7Fbb42e15",
                        "0x0f9A59c985B28fb98f63380566e4e07800246689"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 51138,
                "gasCost": "1756588805",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_council_token": {
                "hash": "0x03fd6da58e2c9b78e25a323fcfdb484b907fb504ec6090747d7e401105902eeb",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x636f756e63696c546f6b656e0000000000000000000000000000000000000000",
                        "0x4feeC0B35b395feD7BC662ee32D185B194Ea9BD6",
                        "0xBc55541e23c5458Bfc625dd331EBa6C756e30290"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 355145,
                "gasCost": "5506014443",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_election_module": {
                "hash": "0x43df77b063d9456a8a3d978a4b03287635a8d4afdacff5bff408596229524306",
                "events": {
                  "Transfer": [
                    {
                      "name": "Transfer",
                      "args": [
                        "0x0000000000000000000000000000000000000000",
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                        {
                          "type": "BigNumber",
                          "hex": "0x48914229dedd5a9922f44441ffccfc2cb7856ee9"
                        }
                      ]
                    }
                  ],
                  "CouncilMemberAdded": [
                    {
                      "name": "CouncilMemberAdded",
                      "args": [
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                        {
                          "type": "BigNumber",
                          "hex": "0x00"
                        }
                      ]
                    }
                  ],
                  "ElectionModuleInitialized": [
                    {
                      "name": "ElectionModuleInitialized",
                      "args": []
                    }
                  ],
                  "EpochStarted": [
                    {
                      "name": "EpochStarted",
                      "args": [
                        {
                          "type": "BigNumber",
                          "hex": "0x00"
                        }
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_election_module",
                "gasUsed": 393066,
                "gasCost": "5362027939",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              }
            },
            "extras": {}
          }
        }
      },
      "hash": "5b6fdec69d153a62db53d49cb2309e9c",
      "version": 6
    },
    "provision.treasury_council": {
      "artifacts": {
        "imports": {
          "treasury_council": {
            "url": "ipfs://QmPSXnVvHpXbJBvfms8HPfCJ3MVMonWDK9CtoHiYhn5PWy",
            "tags": [
              "latest"
            ],
            "preset": "with-synthetix-omnibus",
            "contracts": {
              "AssociatedSystemsModule": {
                "address": "0x215e5E2621C900ddF612321FD9f2a4B434288B43",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xbe3cffa404c259c28c7d7af1d8bdc2ca6ba251a3b6f0c28a7d3aee9925cd6c75",
                "sourceName": "contracts/modules/core/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877177,
                "gasCost": "5441255904"
              },
              "CcipReceiverModule": {
                "address": "0x48dDEEFaBF4DcC6CB459Cb887AaD7ec9a1E5461c",
                "abi": [
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error Unauthorized(address addr)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xd1b118e287cb1e04a9d406128337f3add0c93fc238890c140fe742f89ed32dd8",
                "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                "contractName": "CcipReceiverModule",
                "deployedOn": "contract.CcipReceiverModule",
                "gasUsed": 494281,
                "gasCost": "5366831008"
              },
              "CouncilTokenModule": {
                "address": "0x9c1f3997918472ba11141e03E1f637D7a5e6533F",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xdbea05fd60d643bdce3ab7160abfecb8f1a9d26e9f96e7eec03c0beaa44fd245",
                "sourceName": "contracts/modules/council-nft/CouncilTokenModule.sol",
                "contractName": "CouncilTokenModule",
                "deployedOn": "contract.CouncilTokenModule",
                "gasUsed": 1669255,
                "gasCost": "5353943622"
              },
              "CrossChainModule": {
                "address": "0xdFe7745e2411610a68381E6337e30fe65EF54c06",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x2ce313f406a0e4d3c362ae4ba2518b2ec09c7d20d5c71d4a20b836beb1f004a7",
                "sourceName": "contracts/modules/core/CrossChainModule.sol",
                "contractName": "CrossChainModule",
                "deployedOn": "contract.CrossChainModule",
                "gasUsed": 433366,
                "gasCost": "5549325265"
              },
              "ElectionInspectorModule": {
                "address": "0xd9De30f0AEe46602aad126e1D61cC1a9F8fF04a8",
                "abi": [
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xf7db9fdf0233c6c078e2724a1a447ad2fd3def213420edebc38103b74c625cc0",
                "sourceName": "contracts/modules/core/ElectionInspectorModule.sol",
                "contractName": "ElectionInspectorModule",
                "deployedOn": "contract.ElectionInspectorModule",
                "gasUsed": 348680,
                "gasCost": "5548101336"
              },
              "ElectionModule": {
                "address": "0xE8c08109573B5D756375e66EFdba3abd78091393",
                "abi": [
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xff86f15465657c89892b3d0b5a04e2390a29c1ad847881c7b24e3e119c848180",
                "sourceName": "contracts/modules/core/ElectionModule.sol",
                "contractName": "ElectionModule",
                "deployedOn": "contract.ElectionModule",
                "gasUsed": 3998177,
                "gasCost": "1741713823"
              },
              "InitialModuleBundle": {
                "address": "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/modules/core/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "SnapshotVotePowerModule": {
                "address": "0xd903A34c581494d7e2D04e982Bd29fCb32CEF00A",
                "abi": [
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error NotCallableInCurrentPeriod()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "error Unauthorized(address addr)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xbbee54000601ba3b259d794fb9009570344a669ad6f46ec6874238cc750ea45b",
                "sourceName": "contracts/modules/core/SnapshotVotePowerModule.sol",
                "contractName": "SnapshotVotePowerModule",
                "deployedOn": "contract.SnapshotVotePowerModule",
                "gasUsed": 654596,
                "gasCost": "5930410858"
              },
              "InitialProxy": {
                "address": "0x01fa5A659Da52Fa0AE26bc60698B2760B745d910",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xaa7cab71b9e443996a0335436514088a9ec3b07ca0e541109da317240fcf1c43",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 185358,
                "gasCost": "5738016371"
              },
              "CoreRouter": {
                "address": "0xC3f3cDce2396F693bcBEf25795122ce60DBf4157",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)",
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "0x2ad84b90ab60618caa82b1cb1955e28599e7e361adb6ca98bc24fde42c726541",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 682321,
                "gasCost": "1739032442"
              },
              "CouncilTokenRouter": {
                "address": "0x92aF1f0D609BC51483Caea1eD3B65Fe96b6Ba513",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CouncilTokenRouter",
                "deployTxnHash": "0xee6fb6bd3e47874c6e97618a32f1086a50f63b5f4850ba5ae1f2a352ff753939",
                "contractName": "CouncilTokenRouter",
                "sourceName": "CouncilTokenRouter.sol",
                "gasUsed": 403584,
                "gasCost": "6296126173"
              },
              "CoreProxy": {
                "address": "0x01fa5A659Da52Fa0AE26bc60698B2760B745d910",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function getCandidateVotesInEpoch(address candidate, uint256 epochIndex) view returns (uint256)",
                  "function getElectionWinnersInEpoch(uint256 epochIndex) view returns (address[])",
                  "function getEpochEndDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getEpochStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNominationPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function getNomineesAtEpoch(uint256 epochIndex) view returns (address[])",
                  "function getVotingPeriodStartDateForIndex(uint256 epochIndex) view returns (uint64)",
                  "function hasVotedInEpoch(address user, uint256 chainId, uint256 epochIndex) view returns (bool)",
                  "function wasNominated(address candidate, uint256 epochIndex) view returns (bool)",
                  "error AlreadyACouncilMember()",
                  "error AlreadyNominated()",
                  "error ChangesCurrentPeriod()",
                  "error DuplicateCandidates(address duplicatedCandidate)",
                  "error ElectionAlreadyEvaluated()",
                  "error ElectionNotEvaluated()",
                  "error EmptyArray()",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error InvalidBallot()",
                  "error InvalidElectionSettings()",
                  "error InvalidEpochConfiguration(uint256 code, uint64 v1, uint64 v2)",
                  "error NoCandidates()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod()",
                  "error NotImplemented()",
                  "error NotNominated()",
                  "error PositionOutOfBounds()",
                  "error TooManyMembers()",
                  "error ValueNotInSet()",
                  "event CandidateNominated(address indexed candidate, uint256 indexed epochId)",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event ElectionBatchEvaluated(uint256 indexed epochId, uint256 numEvaluatedBallots, uint256 totalBallots)",
                  "event ElectionEvaluated(uint256 indexed epochId, uint256 ballotCount)",
                  "event ElectionModuleInitialized()",
                  "event EmergencyElectionStarted(uint256 indexed epochId)",
                  "event EpochScheduleUpdated(uint64 indexed epochId, uint64 startDate, uint64 endDate)",
                  "event EpochStarted(uint256 indexed epochId)",
                  "event NominationWithdrawn(address indexed candidate, uint256 indexed epochId)",
                  "event VoteRecorded(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, uint256 votingPower, address[] candidates)",
                  "event VoteWithdrawn(address indexed voter, uint256 indexed chainId, uint256 indexed epochId, address[] candidates)",
                  "function _recvCast(uint256 epochIndex, address voter, uint256 votingPower, uint256 chainId, address[] candidates, uint256[] amounts)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function _recvWithdrawVote(uint256 epochIndex, address voter, uint256 chainId, address[] candidates)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function dismissMembers(address[] membersToDismiss) payable",
                  "function evaluate(uint256 numBallots)",
                  "function getBallot(address voter, uint256 chainId, uint256 electionId) pure returns (tuple(uint256 votingPower, address[] votedCandidates, uint256[] amounts))",
                  "function getBallotCandidates(address voter, uint256 chainId, uint256 electionId) view returns (address[])",
                  "function getCandidateVotes(address candidate) view returns (uint256)",
                  "function getCouncilMembers() view returns (address[])",
                  "function getCouncilToken() view returns (address)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getElectionWinners() view returns (address[])",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getNominees() view returns (address[])",
                  "function getVotePower(address user, uint256 chainId, uint256 electionId) view returns (uint256)",
                  "function hasVoted(address user, uint256 chainId) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function initElectionModuleSatellite() payable",
                  "function initOrUpdateElectionSettings(address[] initialCouncil, uint8 minimumActiveMembers, uint64 initialNominationPeriodStartDate, uint64 administrationPeriodDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration)",
                  "function isElectionEvaluated() view returns (bool)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function isNominated(address candidate) view returns (bool)",
                  "function nominate()",
                  "function resolve() payable",
                  "function setNextElectionSettings(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance)",
                  "function tweakEpochSchedule(uint64 newNominationPeriodStartDate, uint64 newVotingPeriodStartDate, uint64 newEpochEndDate)",
                  "function withdrawNomination()",
                  "function withdrawVote(address[] candidates) payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 power)",
                  "function setSnapshotContract(address snapshotContract, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "CouncilToken": {
                "address": "0x13DC72730c03c635C35C83401fAA4A6eea8f0347",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 0,
                "gasCost": "0"
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmTuiwwgbwvp2epkkPFBDJHpUTYWrCUpLBpuPme6vFVJjz",
                "tags": [
                  "latest"
                ],
                "preset": "with-synthetix-governance",
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                }
              }
            },
            "txns": {
              "upgrade_core_proxy": {
                "hash": "0x6c81e442046a3167c0092ab105e134fa69a81a1750d898d254377399fa3719f1",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x01fa5A659Da52Fa0AE26bc60698B2760B745d910",
                        "0xC3f3cDce2396F693bcBEf25795122ce60DBf4157"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 51150,
                "gasCost": "1731624881",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_council_token": {
                "hash": "0xebc245f57d8367ae2858ab0e3b9988003b9b90ed018025052a3a2cc0869e98d1",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x636f756e63696c546f6b656e0000000000000000000000000000000000000000",
                        "0x13DC72730c03c635C35C83401fAA4A6eea8f0347",
                        "0x92aF1f0D609BC51483Caea1eD3B65Fe96b6Ba513"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 377391,
                "gasCost": "5808185319",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_election_module": {
                "hash": "0x4fefa5d7ad1e74254cdd095a1dfe96cef29e87b3a16e805991e815e3270696ba",
                "events": {
                  "Transfer": [
                    {
                      "name": "Transfer",
                      "args": [
                        "0x0000000000000000000000000000000000000000",
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                        {
                          "type": "BigNumber",
                          "hex": "0x48914229dedd5a9922f44441ffccfc2cb7856ee9"
                        }
                      ]
                    }
                  ],
                  "CouncilMemberAdded": [
                    {
                      "name": "CouncilMemberAdded",
                      "args": [
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                        {
                          "type": "BigNumber",
                          "hex": "0x00"
                        }
                      ]
                    }
                  ],
                  "ElectionModuleInitialized": [
                    {
                      "name": "ElectionModuleInitialized",
                      "args": []
                    }
                  ],
                  "EpochStarted": [
                    {
                      "name": "EpochStarted",
                      "args": [
                        {
                          "type": "BigNumber",
                          "hex": "0x00"
                        }
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_election_module",
                "gasUsed": 393066,
                "gasCost": "5856606302",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              }
            },
            "extras": {}
          }
        }
      },
      "hash": "ce0d5ce1367f11d29954c42ccf7e4917",
      "version": 6
    },
    "invoke.ambassador_council_setSnapshotContract": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "ambassador_council_setSnapshotContract": {
            "hash": "0x13c90d9e20b6eb6c35edae8f3d24d59cb605a91551a87958eb121c7fd73f0be4",
            "events": {},
            "deployedOn": "invoke.ambassador_council_setSnapshotContract",
            "gasUsed": 60437,
            "gasCost": "5623020340",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "bb14a6035777b4fda4b380fe2437b198",
      "version": 6
    },
    "invoke.grants_council_setSnapshotContract": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "grants_council_setSnapshotContract": {
            "hash": "0x9bba3e9e7955f7a4b654e2fa6b29c38d2b477cca86bfacbda89744be65184eb6",
            "events": {},
            "deployedOn": "invoke.grants_council_setSnapshotContract",
            "gasUsed": 60437,
            "gasCost": "5172745406",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "f0dea67f04b5530db6f05f42dd7411f5",
      "version": 6
    },
    "invoke.spartan_council_setSnapshotContract": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "spartan_council_setSnapshotContract": {
            "hash": "0xca702fcc0679b8245ca1595523864df3e123e1f95046943683a25ee40acd2e04",
            "events": {},
            "deployedOn": "invoke.spartan_council_setSnapshotContract",
            "gasUsed": 60437,
            "gasCost": "5813603980",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "499c4e0a36b6beb819cc7790f07126ee",
      "version": 6
    },
    "invoke.treasury_council_setSnapshotContract": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "treasury_council_setSnapshotContract": {
            "hash": "0xfe4c60573fea4168e98b985cc365ddfadceb4ad1cc6313dabdd0c8e0d3a01aef",
            "events": {},
            "deployedOn": "invoke.treasury_council_setSnapshotContract",
            "gasUsed": 60437,
            "gasCost": "5868699738",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "47916b97beefb7f3e2dd4305d0508f29",
      "version": 6
    },
    "invoke.unapprove_wrongfully_deployed_snx_pool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "unapprove_wrongfully_deployed_snx_pool": {
            "hash": "0xf8cbc5d2fbb355513c0c6172cfbf7f23c1e3bf221ae38cba7cc5c175e08e3222",
            "events": {
              "PoolApprovedRemoved": [
                {
                  "name": "PoolApprovedRemoved",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x02"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.unapprove_wrongfully_deployed_snx_pool",
            "gasUsed": 41499,
            "gasCost": "5819928161",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "ea2baf98cbc4a19adee28ba38295d64c",
      "version": 6
    }
  },
  "options": {},
  "status": "complete",
  "meta": {},
  "miscUrl": "ipfs://QmeSt2mnJKE8qmRhLyYbHQQxDKpsFbcWnw5e7JF4xVbN6k",
  "chainId": 11155111
}