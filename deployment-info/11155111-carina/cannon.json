{
  "generator": "cannon cli 2.13.3",
  "timestamp": 1716782018,
  "def": {
    "setting": {
      "minimum_liquidity_ratio": {
        "defaultValue": "<%= parseEther('2') %>"
      },
      "account_timeout_withdraw": {
        "defaultValue": "86400"
      },
      "snx_package": {
        "defaultValue": "synthetix:3.3.18"
      },
      "owner": {
        "defaultValue": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
      },
      "target_preset": {
        "defaultValue": "carina"
      },
      "salt": {
        "defaultValue": "carina"
      },
      "bundleSalt": {
        "defaultValue": "snax"
      },
      "deployer": {
        "defaultValue": "<%= settings.owner %>"
      },
      "eth_aggregator_address": {
        "defaultValue": "0x694AA1769357215DE4FAC081bf1f309aDC325306",
        "description": "https://docs.chain.link/data-feeds/price-feeds/addresses/?network=ethereum&page=1"
      },
      "weth_address": {
        "defaultValue": "<%= weth_mock_collateral.MintableToken.address %>"
      },
      "snx_aggregator_address": {
        "defaultValue": "0xc0F82A46033b8BdBA4Bb0B0e28Bc2006F64355bC",
        "description": "https://docs.chain.link/data-feeds/price-feeds/addresses?network=ethereum&page=1#sepolia-testnet"
      },
      "snx_chainlink_staleness_tolerance": {
        "defaultValue": "3600"
      },
      "snx_address": {
        "defaultValue": "0x29Ba9b0C440CE9e7B0E46138B5Fda83c22467006",
        "description": "https://github.com/Synthetixio/synthetix-docs/blob/master/content/addresses.md"
      },
      "snx_liquidation_reward": {},
      "sc_pool_id": {
        "defaultValue": "1"
      },
      "pool_owner": {
        "defaultValue": "<%= settings.owner %>"
      },
      "bfp_market_package": {
        "defaultValue": "synthetix-bfp-market:1.0.0-alpha.2"
      },
      "wbtc_aggregator_address": {
        "defaultValue": "0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43",
        "description": "https://docs.chain.link/data-feeds/price-feeds/addresses/?network=ethereum&page=1"
      },
      "pyth_address": {
        "defaultValue": "0xDd24F84d36BF92C65F92307595335bdFab5Bbd21",
        "description": "https://docs.pyth.network/price-feeds/contract-addresses/evm#testnets"
      },
      "weth_liquidation_reward": {
        "defaultValue": "<%= parseEther('0.005') %>"
      },
      "wbtc_issuance_ratio_d18": {
        "defaultValue": "<%= parseEther('3') %>"
      },
      "wbtc_liquidation_ratio_d18": {
        "defaultValue": "<%= parseEther('1.5') %>"
      },
      "wbtc_liquidation_reward_d18": {
        "defaultValue": "<%= parseEther('0.01') %>"
      },
      "wbtc_min_delegation_d18": {
        "defaultValue": "<%= parseEther('0.01') %>"
      },
      "weth_max_pool_collateral": {
        "defaultValue": "<%= parseEther(String(20_000)) %>"
      },
      "wbtc_max_pool_collateral": {
        "defaultValue": "<%= parseEther(String(20_000)) %>"
      },
      "susd_max_collateral": {
        "defaultValue": "<%= parseEther(String(100_000_000)) %>"
      },
      "weth_max_collateral": {
        "defaultValue": "<%= parseEther(String(10_000)) %>"
      },
      "wbtc_max_collateral": {
        "defaultValue": "<%= parseEther(String(10_000)) %>"
      },
      "susd_skew_scale": {
        "defaultValue": "0"
      },
      "weth_skew_scale": {
        "defaultValue": "<%= parseEther(String(1_000_000)) %>"
      },
      "wbtc_skew_scale": {
        "defaultValue": "<%= parseEther(String(50_000)) %>"
      },
      "min_keeper_fee_usd": {
        "defaultValue": "<%= parseEther('15') %>"
      },
      "max_keeper_fee_usd": {
        "defaultValue": "<%= parseEther('500') %>"
      },
      "keeper_profit_margin_usd": {
        "defaultValue": "<%= parseEther('20') %>"
      },
      "keeper_profit_margin_percent": {
        "defaultValue": "<%= parseEther('0.2') %>"
      },
      "collateral_discount_scalar": {
        "defaultValue": "<%= parseEther('1') %>"
      },
      "min_collateral_discount": {
        "defaultValue": "<%= parseEther('0.02') %>"
      },
      "max_collateral_discount": {
        "defaultValue": "<%= parseEther('0.2') %>"
      },
      "utilization_breakpoint_percent": {
        "defaultValue": "<%= parseEther('0.80') %>"
      },
      "low_utilization_slope_percent": {
        "defaultValue": "<%= parseEther('0.000025') %>"
      },
      "high_utilization_slope_percent": {
        "defaultValue": "<%= parseEther('0.01') %>"
      },
      "maker_fee": {
        "defaultValue": "<%= parseEther('0.0001') %>"
      },
      "taker_fee": {
        "defaultValue": "<%= parseEther('0.0006') %>"
      },
      "max_market_size": {
        "defaultValue": "<%= parseEther(String(1000)) %>"
      },
      "max_funding_velocity": {
        "defaultValue": "<%= parseEther('3') %>"
      },
      "skew_scale": {
        "defaultValue": "<%= parseEther(String(1_000_000)) %>"
      },
      "funding_velocity_clamp": {
        "defaultValue": "<%= parseEther('0.0003') %>"
      },
      "min_credit_percent": {
        "defaultValue": "<%= parseEther('0.25') %>"
      },
      "min_margin_usd": {
        "defaultValue": "<%= parseEther('1000') %>"
      },
      "min_margin_ratio": {
        "defaultValue": "<%= parseEther('0.05') %>"
      },
      "incremental_margin_scalar": {
        "defaultValue": "<%= parseEther('1') %>"
      },
      "maintenance_margin_scalar": {
        "defaultValue": "<%= parseEther('0.5') %>"
      },
      "max_initial_margin_ratio": {
        "defaultValue": "<%= parseEther('0.9') %>"
      },
      "liquidation_reward_percent": {
        "defaultValue": "<%= parseEther('0.0001') %>"
      },
      "liquidation_limit_scalar": {
        "defaultValue": "<%= parseEther('1') %>"
      },
      "liquidation_max_pd": {
        "defaultValue": "<%= parseEther('0.0006') %>"
      },
      "liquidation_window_duration": {
        "defaultValue": "36"
      },
      "wbtc_address": {
        "defaultValue": "<%= wbtc_mock_collateral.MintableToken.address %>"
      }
    },
    "invoke": {
      "setMinimumLiquidityRatio": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMinLiquidityRatio(uint256)",
        "args": [
          "<%= settings.minimum_liquidity_ratio %>"
        ]
      },
      "setAccountTimeoutWithdraw": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setConfig",
        "args": [
          "<%= formatBytes32String('accountTimeoutWithdraw') %>",
          "<%= hexZeroPad(hexlify(parseInt(settings.account_timeout_withdraw)), 32) %>"
        ],
        "depends": [
          "provision.system",
          "setting.account_timeout_withdraw"
        ]
      },
      "permitCreatePool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addToFeatureFlagAllowlist",
        "args": [
          "<%= formatBytes32String('createPool') %>",
          "<%= settings.deployer %>"
        ]
      },
      "registerEthOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          3,
          "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint8'], [settings.eth_aggregator_address, 0, 8]) %>",
          []
        ],
        "extra": {
          "eth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        },
        "depends": [
          "provision.system",
          "setting.eth_aggregator_address"
        ]
      },
      "configureWethCollateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.weth_address %>",
            "oracleNodeId": "<%= extras.eth_oracle_id %>",
            "issuanceRatioD18": "<%= parseEther('3') %>",
            "liquidationRatioD18": "<%= parseEther('1.5') %>",
            "liquidationRewardD18": "<%= parseEther('0.01') %>",
            "minDelegationD18": "<%= parseEther('0.01') %>",
            "depositingEnabled": true
          }
        ]
      },
      "registerSnxOracleManagerNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          3,
          "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint8'], [settings.snx_aggregator_address, 0, 8]) %>",
          []
        ],
        "extra": {
          "snx_oracle_id_raw": {
            "event": "NodeRegistered",
            "arg": 0
          }
        },
        "depends": [
          "provision.system",
          "setting.snx_aggregator_address"
        ]
      },
      "registerSnxWithStaleness": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.snx_chainlink_staleness_tolerance]) %>",
          [
            "<%= extras.snx_oracle_id_raw %>"
          ]
        ],
        "extra": {
          "snx_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "configureSnxCollateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.snx_address %>",
            "oracleNodeId": "<%= extras.snx_oracle_id %>",
            "issuanceRatioD18": "<%= parseEther('4') %>",
            "liquidationRatioD18": "<%= parseEther('1.5') %>",
            "liquidationRewardD18": "<%= settings.snx_liquidation_reward %>",
            "minDelegationD18": "<%= settings.snx_liquidation_reward %>",
            "depositingEnabled": true
          }
        ]
      },
      "createScPool": {
        "target": [
          "system.CoreProxy"
        ],
        "from": "<%= settings.deployer %>",
        "func": "createPool",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.pool_owner %>"
        ],
        "depends": [
          "invoke.permitCreatePool",
          "provision.system",
          "setting.deployer",
          "setting.pool_owner",
          "setting.sc_pool_id"
        ]
      },
      "setScPoolName": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "setPoolName",
        "args": [
          "<%= settings.sc_pool_id %>",
          "Spartan Council Pool"
        ],
        "depends": [
          "invoke.createScPool",
          "provision.system",
          "setting.sc_pool_id"
        ]
      },
      "setPreferredPool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setPreferredPool",
        "args": [
          "<%= settings.sc_pool_id %>"
        ],
        "depends": [
          "invoke.createScPool",
          "provision.system",
          "setting.sc_pool_id"
        ]
      },
      "OracleManger_registerNode_wbtc": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          3,
          "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint8'], [settings.wbtc_aggregator_address, 0, 8]) %>",
          []
        ],
        "extra": {
          "wbtc_oracle_node_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        },
        "depends": [
          "provision.system",
          "setting.wbtc_aggregator_address"
        ]
      },
      "BfpMarketProxy_setPyth": {
        "target": [
          "bfp_market_factory.BfpMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setPyth",
        "args": [
          "<%= settings.pyth_address %>"
        ]
      },
      "BfpMarketProxy_createRewardDistributor_wbtc": {
        "target": [
          "bfp_market_factory.BfpMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createRewardDistributor",
        "extra": {
          "wbtc_rewards_distributor": {
            "event": "RewardDistributorCreated",
            "arg": 0
          }
        },
        "args": [
          {
            "poolId": "<%= settings.sc_pool_id %>",
            "name": "wBTC RewardDistributor",
            "token": "<%= settings.wbtc_address %>",
            "collateralTypes": [
              "<%= settings.wbtc_address %>",
              "<%= settings.weth_address %>",
              "<%= settings.snx_address %>"
            ]
          }
        ]
      },
      "BfpMarketProxy_createRewardDistributor_weth": {
        "target": [
          "bfp_market_factory.BfpMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createRewardDistributor",
        "extra": {
          "weth_rewards_distributor": {
            "event": "RewardDistributorCreated",
            "arg": 0
          }
        },
        "args": [
          {
            "poolId": "<%= settings.sc_pool_id %>",
            "name": "weth RewardDistributor",
            "token": "<%= settings.weth_address %>",
            "collateralTypes": [
              "<%= settings.wbtc_address %>",
              "<%= settings.weth_address %>",
              "<%= settings.snx_address %>"
            ]
          }
        ]
      },
      "BfpMarketProxy_setMarketConfiguration": {
        "target": [
          "bfp_market_factory.BfpMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMarketConfiguration",
        "args": [
          {
            "pythPublishTimeMin": 12,
            "pythPublishTimeMax": 60,
            "minOrderAge": 12,
            "maxOrderAge": 60,
            "minKeeperFeeUsd": "<%= settings.min_keeper_fee_usd %>",
            "maxKeeperFeeUsd": "<%= settings.max_keeper_fee_usd %>",
            "keeperProfitMarginUsd": "<%= settings.keeper_profit_margin_usd %>",
            "keeperProfitMarginPercent": "<%= settings.keeper_profit_margin_percent %>",
            "keeperSettlementGasUnits": 1200000,
            "keeperCancellationGasUnits": 600000,
            "keeperFlagGasUnits": 1200000,
            "keeperLiquidateMarginGasUnits": 1200000,
            "keeperLiquidationGasUnits": 1200000,
            "keeperLiquidationEndorsed": "<%= settings.deployer %>",
            "collateralDiscountScalar": "<%= settings.collateral_discount_scalar %>",
            "minCollateralDiscount": "<%= settings.min_collateral_discount %>",
            "maxCollateralDiscount": "<%= settings.max_collateral_discount %>",
            "utilizationBreakpointPercent": "<%= settings.utilization_breakpoint_percent %>",
            "lowUtilizationSlopePercent": "<%= settings.low_utilization_slope_percent  %>",
            "highUtilizationSlopePercent": "<%= settings.high_utilization_slope_percent %>"
          }
        ]
      },
      "BfpMarketProxy_setEthOracleNodeId": {
        "target": [
          "bfp_market_factory.BfpMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setEthOracleNodeId",
        "args": [
          "<%= settings.eth_oracle_id %>"
        ]
      },
      "BfpMarketProxy_createMarket_eth": {
        "target": [
          "bfp_market_factory.BfpMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          {
            "name": "<%= formatBytes32String('ETHPERP') %>"
          }
        ],
        "extra": {
          "eth_market_id": {
            "event": "MarketCreated",
            "arg": 0
          }
        }
      },
      "BfpMarketProxy_setMarketConfigurationById_eth": {
        "target": [
          "bfp_market_factory.BfpMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMarketConfigurationById",
        "args": [
          {
            "marketId": "<%= settings.eth_market_id %>",
            "oracleNodeId": "<%= settings.eth_oracle_id %>",
            "pythPriceFeedId": "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
            "makerFee": "<%= settings.maker_fee %>",
            "takerFee": "<%= settings.taker_fee %>",
            "maxMarketSize": "<%= settings.max_market_size %>",
            "maxFundingVelocity": "<%= settings.max_funding_velocity %>",
            "skewScale": "<%= settings.skew_scale %>",
            "fundingVelocityClamp": "<%= settings.funding_velocity_clamp %>",
            "minCreditPercent": "<%= settings.min_credit_percent %>",
            "minMarginUsd": "<%= settings.min_margin_usd %>",
            "minMarginRatio": "<%= settings.min_margin_ratio %>",
            "incrementalMarginScalar": "<%= settings.incremental_margin_scalar %>",
            "maintenanceMarginScalar": "<%= settings.maintenance_margin_scalar %>",
            "maxInitialMarginRatio": "<%= settings.max_initial_margin_ratio %>",
            "liquidationRewardPercent": "<%= settings.liquidation_reward_percent %>",
            "liquidationLimitScalar": "<%= settings.liquidation_limit_scalar %>",
            "liquidationWindowDuration": "<%= settings.liquidation_window_duration %>",
            "liquidationMaxPd": "<%= settings.liquidation_max_pd %>"
          }
        ]
      },
      "BfpMarketProxy_setMarginCollateralConfiguration": {
        "target": [
          "bfp_market_factory.BfpMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMarginCollateralConfiguration",
        "args": [
          [
            "<%= system.USDProxy.address %>",
            "<%= settings.weth_address %>",
            "<%= settings.wbtc_address %>"
          ],
          [
            "<%= imports.system.settings.const_one_oracle_id %>",
            "<%= settings.eth_oracle_id %>",
            "<%= settings.wbtc_oracle_node_id %>"
          ],
          [
            "<%= settings.susd_max_collateral %>",
            "<%= settings.weth_max_collateral %>",
            "<%= settings.wbtc_max_collateral %>"
          ],
          [
            "<%= settings.susd_skew_scale %>",
            "<%= settings.weth_skew_scale %>",
            "<%= settings.wbtc_skew_scale %>"
          ],
          [
            "0x0000000000000000000000000000000000000000",
            "<%= settings.weth_rewards_distributor %>",
            "<%= settings.wbtc_rewards_distributor %>"
          ]
        ]
      },
      "BfpMarketProxy_enableAllFeatures": {
        "target": [
          "bfp_market_factory.BfpMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "enableAllFeatures"
      },
      "CoreProxy_configureCollateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.wbtc_address %>",
            "oracleNodeId": "<%= settings.wbtc_oracle_node_id %>",
            "issuanceRatioD18": "<%= settings.wbtc_issuance_ratio_d18 %>",
            "liquidationRatioD18": "<%= settings.wbtc_liquidation_ratio_d18 %>",
            "liquidationRewardD18": "<%= settings.wbtc_liquidation_reward_d18 %>",
            "minDelegationD18": "<%= settings.wbtc_min_delegation_d18 %>",
            "depositingEnabled": false
          }
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_weth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= settings.eth_market_id %>",
          "<%= settings.weth_address %>",
          "<%= settings.weth_max_pool_collateral %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_wbtc": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= settings.eth_market_id %>",
          "<%= settings.wbtc_address %>",
          "<%= settings.wbtc_max_pool_collateral %>"
        ]
      },
      "CoreProxy_registerRewardsDistributor_wbtc": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.wbtc_address %>",
          "<%= settings.wbtc_rewards_distributor %>"
        ]
      },
      "CoreProxy_registerRewardsDistributor_weth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.weth_address %>",
          "<%= settings.weth_rewards_distributor %>"
        ]
      },
      "CoreProxy_setPoolConfiguration": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "setPoolConfiguration",
        "args": [
          "<%= settings.sc_pool_id %>",
          [
            {
              "marketId": "<%= settings.eth_market_id %>",
              "weightD18": 1,
              "maxDebtShareValueD18": "<%= parseEther('1') %>"
            }
          ]
        ]
      }
    },
    "provision": {
      "system": {
        "source": "<%= settings.snx_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "owner": "<%= settings.owner %>",
          "salt": "<%= settings.salt %>",
          "bundleSalt": "<%= settings.bundleSalt %>"
        }
      },
      "bfp_market_factory": {
        "source": "<%= settings.bfp_market_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "coreProxyOwner": "<%= settings.owner %>",
          "owner": "<%= settings.owner %>",
          "salt": "<%= settings.salt %>",
          "synthetixPackage": "<%= settings.snx_package %>@<%= settings.target_preset %>",
          "synthetixPreset": "<%= settings.target_preset %>"
        },
        "depends": [
          "provision.system",
          "setting.bfp_market_package",
          "setting.owner",
          "setting.salt",
          "setting.snx_package",
          "setting.target_preset"
        ]
      },
      "weth_mock_collateral": {
        "source": "mintable-token:1.8",
        "options": {
          "name": "Fake WETH",
          "symbol": "fWETH",
          "owner": "<%= settings.owner %>",
          "decimals": "18"
        }
      },
      "wbtc_mock_collateral": {
        "source": "mintable-token:1.8",
        "options": {
          "name": "Fake WBTC",
          "symbol": "fWBTC",
          "owner": "<%= settings.owner %>",
          "decimals": "18"
        }
      }
    },
    "name": "synthetix-omnibus",
    "preset": "carina",
    "version": "1",
    "description": "Includes the full synthetix system with configurations applied"
  },
  "state": {
    "setting.account_timeout_withdraw": {
      "artifacts": {
        "settings": {
          "account_timeout_withdraw": "86400"
        }
      },
      "hash": "3acf2387dde14e993634ca9badf5f564",
      "version": 7
    },
    "setting.bfp_market_package": {
      "artifacts": {
        "settings": {
          "bfp_market_package": "synthetix-bfp-market:1.0.0-alpha.2"
        }
      },
      "hash": "a9db074e6f6a7e1a88f93b8bc3cc768a",
      "version": 7
    },
    "setting.bundleSalt": {
      "artifacts": {
        "settings": {
          "bundleSalt": "snax"
        }
      },
      "hash": "1ce8073982f8b8f0b4fa5c488c1fac79",
      "version": 7
    },
    "setting.collateral_discount_scalar": {
      "artifacts": {
        "settings": {
          "collateral_discount_scalar": "1000000000000000000"
        }
      },
      "hash": "845fb85d1e0ccaf6b0afd054626bbe97",
      "version": 7
    },
    "setting.eth_aggregator_address": {
      "artifacts": {
        "settings": {
          "eth_aggregator_address": "0x694AA1769357215DE4FAC081bf1f309aDC325306"
        }
      },
      "hash": "ec59eada77be50773af6fddcd94c1612",
      "version": 7
    },
    "setting.funding_velocity_clamp": {
      "artifacts": {
        "settings": {
          "funding_velocity_clamp": "300000000000000"
        }
      },
      "hash": "a0992005b5b8fe41a8c8ea20ad80b3c0",
      "version": 7
    },
    "setting.high_utilization_slope_percent": {
      "artifacts": {
        "settings": {
          "high_utilization_slope_percent": "10000000000000000"
        }
      },
      "hash": "54bfc1b896e4a36386a208521c14a98b",
      "version": 7
    },
    "setting.incremental_margin_scalar": {
      "artifacts": {
        "settings": {
          "incremental_margin_scalar": "1000000000000000000"
        }
      },
      "hash": "845fb85d1e0ccaf6b0afd054626bbe97",
      "version": 7
    },
    "setting.keeper_profit_margin_percent": {
      "artifacts": {
        "settings": {
          "keeper_profit_margin_percent": "200000000000000000"
        }
      },
      "hash": "f296f686e58711260897d9596d6363a5",
      "version": 7
    },
    "setting.keeper_profit_margin_usd": {
      "artifacts": {
        "settings": {
          "keeper_profit_margin_usd": "20000000000000000000"
        }
      },
      "hash": "8b3e921d69782542e1ab086e31516143",
      "version": 7
    },
    "setting.liquidation_limit_scalar": {
      "artifacts": {
        "settings": {
          "liquidation_limit_scalar": "1000000000000000000"
        }
      },
      "hash": "845fb85d1e0ccaf6b0afd054626bbe97",
      "version": 7
    },
    "setting.liquidation_max_pd": {
      "artifacts": {
        "settings": {
          "liquidation_max_pd": "600000000000000"
        }
      },
      "hash": "edd2c4e8c2f8a1b5a1e8204c228b257b",
      "version": 7
    },
    "setting.liquidation_reward_percent": {
      "artifacts": {
        "settings": {
          "liquidation_reward_percent": "100000000000000"
        }
      },
      "hash": "4a395753002fae8df9c747d89cec52f9",
      "version": 7
    },
    "setting.liquidation_window_duration": {
      "artifacts": {
        "settings": {
          "liquidation_window_duration": "36"
        }
      },
      "hash": "6e75467ce9d1e142369d3d2a7e695448",
      "version": 7
    },
    "setting.low_utilization_slope_percent": {
      "artifacts": {
        "settings": {
          "low_utilization_slope_percent": "25000000000000"
        }
      },
      "hash": "2e9ccfc7ec463ffa87cbe1296cd7975d",
      "version": 7
    },
    "setting.maintenance_margin_scalar": {
      "artifacts": {
        "settings": {
          "maintenance_margin_scalar": "500000000000000000"
        }
      },
      "hash": "432e3c15ccbe73e998f322de6cb6a0c3",
      "version": 7
    },
    "setting.maker_fee": {
      "artifacts": {
        "settings": {
          "maker_fee": "100000000000000"
        }
      },
      "hash": "4a395753002fae8df9c747d89cec52f9",
      "version": 7
    },
    "setting.max_collateral_discount": {
      "artifacts": {
        "settings": {
          "max_collateral_discount": "200000000000000000"
        }
      },
      "hash": "f296f686e58711260897d9596d6363a5",
      "version": 7
    },
    "setting.max_funding_velocity": {
      "artifacts": {
        "settings": {
          "max_funding_velocity": "3000000000000000000"
        }
      },
      "hash": "f564eb7a12d7143eb45d4ae362f2f600",
      "version": 7
    },
    "setting.max_initial_margin_ratio": {
      "artifacts": {
        "settings": {
          "max_initial_margin_ratio": "900000000000000000"
        }
      },
      "hash": "7056b70cf968bb190a533e1c6cf63fee",
      "version": 7
    },
    "setting.max_keeper_fee_usd": {
      "artifacts": {
        "settings": {
          "max_keeper_fee_usd": "500000000000000000000"
        }
      },
      "hash": "5a284ad55ec05d8fd15a8c9119d10606",
      "version": 7
    },
    "setting.max_market_size": {
      "artifacts": {
        "settings": {
          "max_market_size": "1000000000000000000000"
        }
      },
      "hash": "5b7618f33dff6872423583725a980f88",
      "version": 7
    },
    "setting.min_collateral_discount": {
      "artifacts": {
        "settings": {
          "min_collateral_discount": "20000000000000000"
        }
      },
      "hash": "edcad93121d0d5a64b1e8144724640c7",
      "version": 7
    },
    "setting.min_credit_percent": {
      "artifacts": {
        "settings": {
          "min_credit_percent": "250000000000000000"
        }
      },
      "hash": "7f56bbc581ab6e0b6104deeb507ef029",
      "version": 7
    },
    "setting.min_keeper_fee_usd": {
      "artifacts": {
        "settings": {
          "min_keeper_fee_usd": "15000000000000000000"
        }
      },
      "hash": "53b91cbd16b13708a86ea3f224154fc7",
      "version": 7
    },
    "setting.min_margin_ratio": {
      "artifacts": {
        "settings": {
          "min_margin_ratio": "50000000000000000"
        }
      },
      "hash": "055d18298aa38d55aacd74aedaf77e97",
      "version": 7
    },
    "setting.min_margin_usd": {
      "artifacts": {
        "settings": {
          "min_margin_usd": "1000000000000000000000"
        }
      },
      "hash": "5b7618f33dff6872423583725a980f88",
      "version": 7
    },
    "setting.minimum_liquidity_ratio": {
      "artifacts": {
        "settings": {
          "minimum_liquidity_ratio": "2000000000000000000"
        }
      },
      "hash": "09553939422a81e0204384bf690274c4",
      "version": 7
    },
    "setting.owner": {
      "artifacts": {
        "settings": {
          "owner": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
        }
      },
      "hash": "d9b9f9b6eb9d808c78d968fa7e00863d",
      "version": 7
    },
    "setting.pyth_address": {
      "artifacts": {
        "settings": {
          "pyth_address": "0xDd24F84d36BF92C65F92307595335bdFab5Bbd21"
        }
      },
      "hash": "d7833642d855846b0bdd471e9ac0b98d",
      "version": 7
    },
    "setting.salt": {
      "artifacts": {
        "settings": {
          "salt": "carina"
        }
      },
      "hash": "3d92dd84739b3b2ad5f670901be17b21",
      "version": 7
    },
    "setting.sc_pool_id": {
      "artifacts": {
        "settings": {
          "sc_pool_id": "1"
        }
      },
      "hash": "5f6fb867a611e73895d85f93fc6f7baa",
      "version": 7
    },
    "setting.skew_scale": {
      "artifacts": {
        "settings": {
          "skew_scale": "1000000000000000000000000"
        }
      },
      "hash": "563261047cda85ae592800486d39bc77",
      "version": 7
    },
    "setting.snx_address": {
      "artifacts": {
        "settings": {
          "snx_address": "0x29Ba9b0C440CE9e7B0E46138B5Fda83c22467006"
        }
      },
      "hash": "dd37832585265c6609aad7e0aed48de9",
      "version": 7
    },
    "setting.snx_aggregator_address": {
      "artifacts": {
        "settings": {
          "snx_aggregator_address": "0xc0F82A46033b8BdBA4Bb0B0e28Bc2006F64355bC"
        }
      },
      "hash": "930debe1a7c6fafee8acd2f0488eaf95",
      "version": 7
    },
    "setting.snx_chainlink_staleness_tolerance": {
      "artifacts": {
        "settings": {
          "snx_chainlink_staleness_tolerance": "3600"
        }
      },
      "hash": "cbe1a4d89aef65379151a3c5b905bd85",
      "version": 7
    },
    "setting.snx_liquidation_reward": {
      "artifacts": {
        "settings": {
          "snx_liquidation_reward": ""
        }
      },
      "hash": "99914b932bd37a50b983c5e7c90ae93b",
      "version": 7
    },
    "setting.snx_package": {
      "artifacts": {
        "settings": {
          "snx_package": "synthetix:3.3.18"
        }
      },
      "hash": "bf213d1a83605ef69753be3a7653f373",
      "version": 7
    },
    "setting.susd_max_collateral": {
      "artifacts": {
        "settings": {
          "susd_max_collateral": "100000000000000000000000000"
        }
      },
      "hash": "42ab02ae7f916e6ed59461f615370985",
      "version": 7
    },
    "setting.susd_skew_scale": {
      "artifacts": {
        "settings": {
          "susd_skew_scale": "0"
        }
      },
      "hash": "4dcc24a97eaa6583aab6a5b0cb07d27e",
      "version": 7
    },
    "setting.taker_fee": {
      "artifacts": {
        "settings": {
          "taker_fee": "600000000000000"
        }
      },
      "hash": "edd2c4e8c2f8a1b5a1e8204c228b257b",
      "version": 7
    },
    "setting.target_preset": {
      "artifacts": {
        "settings": {
          "target_preset": "carina"
        }
      },
      "hash": "3d92dd84739b3b2ad5f670901be17b21",
      "version": 7
    },
    "setting.utilization_breakpoint_percent": {
      "artifacts": {
        "settings": {
          "utilization_breakpoint_percent": "800000000000000000"
        }
      },
      "hash": "f7f749cb794cb4e3e85a5dd531df30c7",
      "version": 7
    },
    "setting.wbtc_aggregator_address": {
      "artifacts": {
        "settings": {
          "wbtc_aggregator_address": "0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43"
        }
      },
      "hash": "b08336e1d61038d25c32bad12449b8a5",
      "version": 7
    },
    "setting.wbtc_issuance_ratio_d18": {
      "artifacts": {
        "settings": {
          "wbtc_issuance_ratio_d18": "3000000000000000000"
        }
      },
      "hash": "f564eb7a12d7143eb45d4ae362f2f600",
      "version": 7
    },
    "setting.wbtc_liquidation_ratio_d18": {
      "artifacts": {
        "settings": {
          "wbtc_liquidation_ratio_d18": "1500000000000000000"
        }
      },
      "hash": "c1d908f79852cdcacfde4731b3912f6d",
      "version": 7
    },
    "setting.wbtc_liquidation_reward_d18": {
      "artifacts": {
        "settings": {
          "wbtc_liquidation_reward_d18": "10000000000000000"
        }
      },
      "hash": "54bfc1b896e4a36386a208521c14a98b",
      "version": 7
    },
    "setting.wbtc_max_collateral": {
      "artifacts": {
        "settings": {
          "wbtc_max_collateral": "10000000000000000000000"
        }
      },
      "hash": "5fe1681558f6a599da4a4589e073d41b",
      "version": 7
    },
    "setting.wbtc_max_pool_collateral": {
      "artifacts": {
        "settings": {
          "wbtc_max_pool_collateral": "20000000000000000000000"
        }
      },
      "hash": "1d25f715e7c1eccfe8874a15ee7e5c16",
      "version": 7
    },
    "setting.wbtc_min_delegation_d18": {
      "artifacts": {
        "settings": {
          "wbtc_min_delegation_d18": "10000000000000000"
        }
      },
      "hash": "54bfc1b896e4a36386a208521c14a98b",
      "version": 7
    },
    "setting.wbtc_skew_scale": {
      "artifacts": {
        "settings": {
          "wbtc_skew_scale": "50000000000000000000000"
        }
      },
      "hash": "bce7fa9842e4cf991e56afc65b20b9ff",
      "version": 7
    },
    "setting.weth_liquidation_reward": {
      "artifacts": {
        "settings": {
          "weth_liquidation_reward": "5000000000000000"
        }
      },
      "hash": "7b54ff46e6768da73f16016d4be6f513",
      "version": 7
    },
    "setting.weth_max_collateral": {
      "artifacts": {
        "settings": {
          "weth_max_collateral": "10000000000000000000000"
        }
      },
      "hash": "5fe1681558f6a599da4a4589e073d41b",
      "version": 7
    },
    "setting.weth_max_pool_collateral": {
      "artifacts": {
        "settings": {
          "weth_max_pool_collateral": "20000000000000000000000"
        }
      },
      "hash": "1d25f715e7c1eccfe8874a15ee7e5c16",
      "version": 7
    },
    "setting.weth_skew_scale": {
      "artifacts": {
        "settings": {
          "weth_skew_scale": "1000000000000000000000000"
        }
      },
      "hash": "563261047cda85ae592800486d39bc77",
      "version": 7
    },
    "provision.system": {
      "artifacts": {
        "imports": {
          "system": {
            "url": "ipfs://QmfWpM9UxApK2deXLU81VDF5rZz7FyU4ntt3JqWDNJSALf",
            "tags": [
              "latest"
            ],
            "preset": "carina",
            "contracts": {
              "AccountModule": {
                "address": "0x66379373B4df3D93cd6A50114594B66F21b3Aaee",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x2348ebe9c5f7ef32a61fedd3fbb7f71362f5bd9542cafb4bd2b90bb077bad89b",
                "sourceName": "contracts/modules/core/AccountModule.sol",
                "contractName": "AccountModule",
                "deployedOn": "contract.AccountModule",
                "gasUsed": 1209268,
                "gasCost": "744969657"
              },
              "AccountTokenModule": {
                "address": "0xEa9E9482F6E15cbFaEDe135b181E7b7457596042",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x421cc21505705542ed099edcee3ffafd56ce7679e9f27011ba267c99f41620ab",
                "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                "contractName": "AccountTokenModule",
                "deployedOn": "contract.AccountTokenModule",
                "gasUsed": 1787656,
                "gasCost": "745028746"
              },
              "AssociateDebtModule": {
                "address": "0xeDB4D0F1aCBC6fE4665Daf2344c8623989b025F6",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x9363a42222faad684b27d0d97bd8c71abfe74ad51b505e5af9166a948b4bd405",
                "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                "contractName": "AssociateDebtModule",
                "deployedOn": "contract.AssociateDebtModule",
                "gasUsed": 2287030,
                "gasCost": "744988838"
              },
              "AssociatedSystemsModule": {
                "address": "0xf74D746816833cF90E1A3fBb3ACD6E61851F2Ec9",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x96402172e751b9ecf0634b83b8f8527ad7754c35e8d23c68143c7ba3dcd5d389",
                "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877153,
                "gasCost": "744980752"
              },
              "CcipReceiverModule": {
                "address": "0x61236a268D0498C2234335975f4E41660b062ff8",
                "abi": [
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error Unauthorized(address addr)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x594b50fac6b6d253742752996198ca24326093c42d8e961eabcd2ee48f90a9c0",
                "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                "contractName": "CcipReceiverModule",
                "deployedOn": "contract.CcipReceiverModule",
                "gasUsed": 469476,
                "gasCost": "745025171"
              },
              "CollateralConfigurationModule": {
                "address": "0xCc1dB5266C15f2feC33422BA0164A07d3a49c890",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x65f6a4c230292784375d305c96040b9773cfe120858525f32e5cb1cae131d838",
                "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                "contractName": "CollateralConfigurationModule",
                "deployedOn": "contract.CollateralConfigurationModule",
                "gasUsed": 837646,
                "gasCost": "744923523"
              },
              "CollateralModule": {
                "address": "0x1FA7961F44E7afAc853687A3BD14Fc99245e5ba2",
                "abi": [
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error AccountNotFound(uint128 accountId)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x5547f1103096cc29b7043faa7f214fab5c9469215287ed5bc44ec411644981f9",
                "sourceName": "contracts/modules/core/CollateralModule.sol",
                "contractName": "CollateralModule",
                "deployedOn": "contract.CollateralModule",
                "gasUsed": 1729996,
                "gasCost": "1000595905"
              },
              "CrossChainUSDModule": {
                "address": "0xdfE88f5cA1C0d6D6670905c70b90279bb955F681",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xd9fae95ba4839abdf690f06a64933be03097fa65d14e21cf8aa6465546827203",
                "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                "contractName": "CrossChainUSDModule",
                "deployedOn": "contract.CrossChainUSDModule",
                "gasUsed": 595289,
                "gasCost": "745041913"
              },
              "FeatureFlagModule": {
                "address": "0x2a994F5289ad48e7100EbD64C785De35a225575e",
                "abi": [
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xff26bfb17b4dae59a3823bcd45509593db257a24cff4186fa362bb271619398e",
                "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                "contractName": "FeatureFlagModule",
                "deployedOn": "contract.FeatureFlagModule",
                "gasUsed": 777054,
                "gasCost": "1000671252"
              },
              "IssueUSDModule": {
                "address": "0xD052fC25387f2Af10DFFB005871344A5E043b9bF",
                "abi": [
                  "error CollateralDepositDisabled(address collateralType)",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PoolNotFound(uint128 poolId)",
                  "event IssuanceFeePaid(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 feeAmount)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xf01ca008fdabc24f9eac5586326579d3bcd6433357427d68e67e41022b83bdde",
                "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                "contractName": "IssueUSDModule",
                "deployedOn": "contract.IssueUSDModule",
                "gasUsed": 2808883,
                "gasCost": "1000660887"
              },
              "LiquidationModule": {
                "address": "0x5F91da31B33F33dda6E037a94214da6C64faC165",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error CannotScaleEmptyMapping()",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xd05c4a9d74ee33b3e7701a110aac1eef400527bd532f9b69ac6efc0d5b922f29",
                "sourceName": "contracts/modules/core/LiquidationModule.sol",
                "contractName": "LiquidationModule",
                "deployedOn": "contract.LiquidationModule",
                "gasUsed": 2889614,
                "gasCost": "1000569287"
              },
              "MarketCollateralModule": {
                "address": "0xE66e9957902BE7CaF4c69662A48E346EB275A040",
                "abi": [
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "error Unauthorized(address addr)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x812094481d4ee28015e69f121596688ace72d492520c370cb6612b54e992d08a",
                "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                "contractName": "MarketCollateralModule",
                "deployedOn": "contract.MarketCollateralModule",
                "gasUsed": 1222509,
                "gasCost": "1000589407"
              },
              "MarketManagerModule": {
                "address": "0x5e6E1d87494Ed954fdE743f85829f9c97C052B5E",
                "abi": [
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error IncorrectMarketInterface(address market)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xf4b8b8938130ec4f51932e4edd5e7ebecea8665569b3a6d6bf67210b5308440e",
                "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                "contractName": "MarketManagerModule",
                "deployedOn": "contract.MarketManagerModule",
                "gasUsed": 2749047,
                "gasCost": "1000568028"
              },
              "PoolConfigurationModule": {
                "address": "0xEa7816325Cc48075A1870ce0FAd5C3881B3F94cA",
                "abi": [
                  "error PoolNotFound(uint128 poolId)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xc5b3b324d27bd54f7c56ad45dbbce522ac0da2e8fdcc30fb9558271710c46dd1",
                "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                "contractName": "PoolConfigurationModule",
                "deployedOn": "contract.PoolConfigurationModule",
                "gasUsed": 446271,
                "gasCost": "1000526514"
              },
              "PoolModule": {
                "address": "0x10bE696c63818d5f13436A1dd40F6Be4E3901efe",
                "abi": [
                  "error CapacityLocked(uint256 marketId)",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "error PoolNotFound(uint128 poolId)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function renouncePoolOwnership(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x42e27f45f83583d0f6dfe396cebb1d62297d2ed8511e17109337ef63abb9898f",
                "sourceName": "contracts/modules/core/PoolModule.sol",
                "contractName": "PoolModule",
                "deployedOn": "contract.PoolModule",
                "gasUsed": 3705275,
                "gasCost": "1000562068"
              },
              "RewardsManagerModule": {
                "address": "0x7674601bC10bdF1FC9944D31ADC814b831b37231",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error RewardDistributorNotFound()",
                  "error RewardUnavailable(address distributor)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)",
                  "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration)",
                  "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x334dcf0f2877c6ed9dcb5f1737ba95778151d0edb7cc0e73ce6565cee0678f9f",
                "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                "contractName": "RewardsManagerModule",
                "deployedOn": "contract.RewardsManagerModule",
                "gasUsed": 2260293,
                "gasCost": "1000510538"
              },
              "USDTokenModule": {
                "address": "0x2A529f6b9F91Bc1F809a7802cC944839aA240724",
                "abi": [
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error Unauthorized(address addr)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x56a3128e96c8e624b49ee3fcca5072b4acb15e2beca7065cf58c693f4bd6175d",
                "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                "contractName": "USDTokenModule",
                "deployedOn": "contract.USDTokenModule",
                "gasUsed": 1110294,
                "gasCost": "1000651475"
              },
              "UtilsModule": {
                "address": "0x80aC5F20e692bD62f2b2Caa7E3b370E67CAF4003",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function getTrustedForwarder() pure returns (address)",
                  "function isTrustedForwarder(address forwarder) pure returns (bool)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xbe6840a657bbb86445f5cfb1357fc8d4da322b4d6da6c622e8d6f820711d5fae",
                "sourceName": "contracts/modules/core/UtilsModule.sol",
                "contractName": "UtilsModule",
                "deployedOn": "contract.UtilsModule",
                "gasUsed": 759709,
                "gasCost": "1000618974"
              },
              "VaultModule": {
                "address": "0x604cd6F3E40713406c73eeb3fcBe67aDD7deAb19",
                "abi": [
                  "error CapacityLocked(uint256 marketId)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error EmptyDistribution()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "error PoolNotFound(uint128 poolId)",
                  "error PositionOutOfBounds()",
                  "error RewardDistributorNotFound()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x3d48977428836555f1965bf6d308bff7b40f68c15eb62dbb2048b637709af307",
                "sourceName": "contracts/modules/core/VaultModule.sol",
                "contractName": "VaultModule",
                "deployedOn": "contract.VaultModule",
                "gasUsed": 3541151,
                "gasCost": "1000598246"
              },
              "InitialModuleBundle": {
                "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/modules/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "InitialCoreProxy": {
                "address": "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x828EED723cAF0A8F822249231266E38dF614923C",
                  "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x79bf753270dee970ff5f0d0549aca06cab6569f98182bda5bc6fd5902b3ed67d",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialCoreProxy",
                "gasUsed": 185358,
                "gasCost": "1000574402"
              },
              "AccountRouter": {
                "address": "0xf3c8c97d6e9abe7d7e585a7b015bf8c5cabaa0dc",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployedOn": "router.AccountRouter",
                "deployTxnHash": "0x7550561eea17b36ac083a97b4dbf541bc22572ad8902beb6c4916f6e0f832f54",
                "contractName": "AccountRouter",
                "sourceName": "AccountRouter.sol",
                "gasUsed": 403596,
                "gasCost": "1000647882"
              },
              "CoreRouter": {
                "address": "0xeab23934b8cef6f823f27540b291f5d6ed275c9e",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error PoolNotFound(uint128 poolId)",
                  "event IssuanceFeePaid(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 feeAmount)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "error CannotScaleEmptyMapping()",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "error IncorrectMarketInterface(address market)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)",
                  "error CapacityLocked(uint256 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function renouncePoolOwnership(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error RewardDistributorNotFound()",
                  "error RewardUnavailable(address distributor)",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)",
                  "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration)",
                  "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function getTrustedForwarder() pure returns (address)",
                  "function isTrustedForwarder(address forwarder) pure returns (bool)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "0x09b4bb4deb76f37a71e5b2f0706ce485fbc6f17bd4a398b8bfaf9ef4b3546bb9",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 1298704,
                "gasCost": "1000640529"
              },
              "USDRouter": {
                "address": "0x696be5d14863b2e7a6c151682458ee6820e6996c",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployedOn": "router.USDRouter",
                "deployTxnHash": "0x869b3e74a644ec47d0f7dcdb2ae39a0e95342529ff5693176ad06d7812cf0bad",
                "contractName": "USDRouter",
                "sourceName": "USDRouter.sol",
                "gasUsed": 395163,
                "gasCost": "1000648406"
              },
              "CoreProxy": {
                "address": "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error PoolNotFound(uint128 poolId)",
                  "event IssuanceFeePaid(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 feeAmount)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "error CannotScaleEmptyMapping()",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "error IncorrectMarketInterface(address market)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)",
                  "error CapacityLocked(uint256 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function renouncePoolOwnership(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error RewardDistributorNotFound()",
                  "error RewardUnavailable(address distributor)",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)",
                  "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration)",
                  "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function getTrustedForwarder() pure returns (address)",
                  "function isTrustedForwarder(address forwarder) pure returns (bool)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "AccountProxy": {
                "address": "0xC1DA71C6BD1D55Cd061852cbf13b58617Fee945B",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_account",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "USDProxy": {
                "address": "0x83ed9FAE796Ec171a732af3D4D10B03BA9cd2568",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_usd",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmTgMg1X26Jer5kyj2FY2DVAdm6u7b4KxRD31C879HHD6z",
                "tags": [
                  "latest"
                ],
                "preset": "with-synthetix",
                "settings": {
                  "salt": "salt"
                },
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                },
                "extras": {
                  "salt": "salt"
                }
              },
              "oracle_manager": {
                "url": "ipfs://QmW65TRBkesnj3KjJPLyBj7q2ixbnYtB6Dc2uDBdkxXVvP",
                "tags": [
                  "latest"
                ],
                "preset": "with-synthetix",
                "contracts": {
                  "NodeModule": {
                    "address": "0xa28De4A0d0F0a824F4A71b9AEE5F5CEA05D9b62f",
                    "abi": [
                      "error DeviationToleranceExceeded(int256 deviation)",
                      "error InvalidInputPrice()",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "error StalenessToleranceExceeded()",
                      "error UnprocessableNode(bytes32 nodeId)",
                      "error UnsupportedOperation(uint8 operation)",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x540ac84284fbca6db2b9a66d35619b30f6622af8e10e5f6319816ac1f25eb5bc",
                    "sourceName": "contracts/modules/NodeModule.sol",
                    "contractName": "NodeModule",
                    "deployedOn": "contract.NodeModule",
                    "gasUsed": 4094153,
                    "gasCost": "1000593036"
                  },
                  "CoreModule": {
                    "address": "0x7b2745b9254cFfdC235F43740cF5a60d3b42ad91",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x2daefa0b902ff833eefc34d6747b73093a43982212bd39f5141c380fa7ca5d3f",
                    "sourceName": "contracts/modules/CoreModule.sol",
                    "contractName": "CoreModule",
                    "deployedOn": "contract.CoreModule",
                    "gasUsed": 942573,
                    "gasCost": "1000588051"
                  },
                  "InitialProxy": {
                    "address": "0x11fF13A137688A9951C6390Cf845A7C09791eD10",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x7b2745b9254cFfdC235F43740cF5a60d3b42ad91",
                      "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x7280890c9719507d291d89e7b9e29c5626cc7f167d8711f9018ace99d0198b02",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialProxy",
                    "gasUsed": 249395,
                    "gasCost": "1000550696"
                  },
                  "OracleRouter": {
                    "address": "0xeb06eeee4cea59887a904d13a06d77af87f3e0a9",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error DeviationToleranceExceeded(int256 deviation)",
                      "error InvalidInputPrice()",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "error StalenessToleranceExceeded()",
                      "error UnprocessableNode(bytes32 nodeId)",
                      "error UnsupportedOperation(uint8 operation)",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "deployedOn": "router.OracleRouter",
                    "deployTxnHash": "0xc82859f30ca777b453efa7df84f83568b308d355dc1abe62ed56bc751295f586",
                    "contractName": "OracleRouter",
                    "sourceName": "OracleRouter.sol",
                    "gasUsed": 243136,
                    "gasCost": "1000598086"
                  },
                  "Proxy": {
                    "address": "0x11fF13A137688A9951C6390Cf845A7C09791eD10",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error DeviationToleranceExceeded(int256 deviation)",
                      "error InvalidInputPrice()",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "error StalenessToleranceExceeded()",
                      "error UnprocessableNode(bytes32 nodeId)",
                      "error UnsupportedOperation(uint8 operation)",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "deployTxnHash": "",
                    "sourceName": "",
                    "contractName": "",
                    "deployedOn": "invoke.upgrade_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "imports": {
                  "trusted_multicall_forwarder": {
                    "url": "ipfs://QmY5G1XsUw81j1s8j2j1asfak8Ke4qA2tHmhF7BnsFw6NB",
                    "tags": [
                      "latest"
                    ],
                    "preset": "with-oracle-manager",
                    "settings": {
                      "salt": "salt"
                    },
                    "contracts": {
                      "TrustedMulticallForwarder": {
                        "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                        "abi": [
                          "constructor()",
                          "error AddressInsufficientBalance(address account)",
                          "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                          "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                          "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                          "error ERC2771UntrustfulTarget(address target, address forwarder)",
                          "error FailedInnerCall()",
                          "error InvalidAccountNonce(address account, uint256 currentNonce)",
                          "error InvalidShortString()",
                          "error StringTooLong(string str)",
                          "event EIP712DomainChanged()",
                          "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                          "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                          "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                          "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                          "function getBasefee() view returns (uint256 basefee)",
                          "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                          "function getBlockNumber() view returns (uint256 blockNumber)",
                          "function getChainId() view returns (uint256 chainid)",
                          "function getCurrentBlockCoinbase() view returns (address coinbase)",
                          "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                          "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                          "function getEthBalance(address addr) view returns (uint256 balance)",
                          "function getLastBlockHash() view returns (bytes32 blockHash)",
                          "function getPrevRandao() view returns (uint256 prevrandao)",
                          "function nonces(address owner) view returns (uint256)",
                          "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "sourceName": "src/TrustedMulticallForwarder.sol",
                        "contractName": "TrustedMulticallForwarder",
                        "deployedOn": "contract.TrustedMulticallForwarder",
                        "gasUsed": 0,
                        "gasCost": "0"
                      }
                    },
                    "extras": {
                      "salt": "salt"
                    }
                  }
                },
                "settings": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "oracle-manager-official"
                },
                "txns": {
                  "upgrade_proxy": {
                    "hash": "0xd1a9329c6278fa3d15877dc75ff45dce9c2123ccb1cd4b19907ef2b525f641f8",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x11fF13A137688A9951C6390Cf845A7C09791eD10",
                            "0xEB06EeeE4cEA59887a904D13a06D77Af87F3e0a9"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_proxy",
                    "gasUsed": 51933,
                    "gasCost": "1000581537",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  }
                },
                "extras": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "oracle-manager-official"
                }
              }
            },
            "settings": {
              "bundleSalt": "main",
              "oracle_manager_source": "oracle-manager",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "main",
              "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733"
            },
            "txns": {
              "register_const_one_oracle": {
                "hash": "0x28e8a467172203c7dda5cbb94b78e1615c7a6b1f70b0e89e1a607e993fc237d8",
                "events": {
                  "NodeRegistered": [
                    {
                      "name": "NodeRegistered",
                      "args": [
                        "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                        8,
                        "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                        []
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.register_const_one_oracle",
                "gasUsed": 108479,
                "gasCost": "1000578302",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "upgrade_core_proxy": {
                "hash": "0x615cdfd10a14f07317dcbdd125a6309520f7d6c77d183e29d0f0be1d2d149f19",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE",
                        "0xEab23934b8Cef6f823f27540b291F5D6ed275c9e"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 47483,
                "gasCost": "1000629310",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_burnUsd": {
                "hash": "0x1a6f56510b7f74b57306409c8b674477ec4634000796e05239bd140094d73bc7",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6275726e55736400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_burnUsd",
                "gasUsed": 56949,
                "gasCost": "1000615483",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_claimRewards": {
                "hash": "0x86bc2207b5bfd375d489247d35d621c6a3aa6b37eae3a14c6d07670a2fb414e0",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x636c61696d526577617264730000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_claimRewards",
                "gasUsed": 57009,
                "gasCost": "1000635789",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_createAccount": {
                "hash": "0xadb03ffef58e774a0d4b2ca50dab6559566862b81cd4d5050c2cd6a680911f41",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_createAccount",
                "gasUsed": 57021,
                "gasCost": "1000630314",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_delegateCollateral": {
                "hash": "0xbbd82ee82cf4aa350f5cce033b6df35287ee939e5adc4bd061215439a9d2f76d",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_delegateCollateral",
                "gasUsed": 57081,
                "gasCost": "1000616781",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_deposit": {
                "hash": "0x80d89f23f749a8de33394612d9b27079436fa7cf40a07a5b35cebfa214ab98ae",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f73697400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_deposit",
                "gasUsed": 56949,
                "gasCost": "1000641669",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_depositMarketCollateral": {
                "hash": "0xb221a21a62585b7f59f78828732c06a2d2648e49c65e9d4014556d54404c7530",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                "gasUsed": 57141,
                "gasCost": "1000644946",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_depositMarketUsd": {
                "hash": "0x86208409b3b738a4eb577657daddec52d64661fecc1c470b8c0a3bb6c1e32306",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_depositMarketUsd",
                "gasUsed": 57057,
                "gasCost": "1000621391",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_liquidate": {
                "hash": "0x2a13a7ae3e9604ea3274335e6fa9bd5bd5d324b547954a7fd37284f9f59be978",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6c69717569646174650000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_liquidate",
                "gasUsed": 56973,
                "gasCost": "1000614088",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_liquidateVault": {
                "hash": "0xd5caedea7823c18f1db35e1eb3324d713a76284e509f435daa8baf2f7336c0b4",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_liquidateVault",
                "gasUsed": 57033,
                "gasCost": "1000594959",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_mintUsd": {
                "hash": "0xb0928585e9465a28a98df8001095916b11b09c66277db1d29b4447469787d4d8",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_mintUsd",
                "gasUsed": 56949,
                "gasCost": "1000616239",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_withdraw": {
                "hash": "0x53f8d28ca0a2a9e1a593a202653647387ce10805f0c61e5db00dc082a521163b",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x7769746864726177000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_withdraw",
                "gasUsed": 56961,
                "gasCost": "1000603996",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_withdrawMarketCollateral": {
                "hash": "0x35ec1a13f427632dd5f92003af96f8073f7b5b7babb16bd18c11daa5021d1e47",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                "gasUsed": 57153,
                "gasCost": "1000648822",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "enable_feature_withdrawMarketUsd": {
                "hash": "0xfd7b4b8c785715563263851a2e105e26ec208a7131940dff51d023b127756400",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                "gasUsed": 57069,
                "gasCost": "1000669635",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "init_account": {
                "hash": "0x18a66340df2da3fe6efb8d0a218a79fcea766177829d58418e0e03af109f639d",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                        "0xC1DA71C6BD1D55Cd061852cbf13b58617Fee945B",
                        "0xf3C8c97D6e9abE7D7e585A7b015BF8c5CAbAa0dC"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_account",
                "gasUsed": 354887,
                "gasCost": "1000665740",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "init_usd": {
                "hash": "0xe9e3370e10b47c1157520cb3c3ec1db4cd18761878cf61f0224f6123d953ca92",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633230000000000000000000000000000000000000000000000000000000",
                        "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                        "0x83ed9FAE796Ec171a732af3D4D10B03BA9cd2568",
                        "0x696Be5D14863B2E7A6C151682458eE6820e6996c"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_usd",
                "gasUsed": 327328,
                "gasCost": "1000659971",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "set_oracle_manager": {
                "hash": "0xc3ee7ed96acd10d9fa4eaf93d1df5428a9c691387451406fd1f9f132034e5274",
                "events": {},
                "deployedOn": "invoke.set_oracle_manager",
                "gasUsed": 54810,
                "gasCost": "1000639566",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "configure_usd_collateral": {
                "hash": "0x20836c79c86144d127fd8cdda51ad254070e8a717f303a964287229b50492b2e",
                "events": {
                  "CollateralConfigured": [
                    {
                      "name": "CollateralConfigured",
                      "args": [
                        "0x83ed9FAE796Ec171a732af3D4D10B03BA9cd2568",
                        {
                          "depositingEnabled": true,
                          "issuanceRatioD18": "10000000000000000000",
                          "liquidationRatioD18": "10000000000000000000",
                          "liquidationRewardD18": "0",
                          "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                          "tokenAddress": "0x83ed9FAE796Ec171a732af3D4D10B03BA9cd2568",
                          "minDelegationD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                        }
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.configure_usd_collateral",
                "gasUsed": 240627,
                "gasCost": "1000619922",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              }
            },
            "extras": {
              "bundleSalt": "main",
              "oracle_manager_source": "oracle-manager",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "main",
              "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733"
            }
          }
        }
      },
      "version": 7
    },
    "provision.wbtc_mock_collateral": {
      "artifacts": {
        "imports": {
          "wbtc_mock_collateral": {
            "url": "ipfs://QmesLpm7trz18t6pjtY9dn9Bz7cKCyf7sKtHVCi8co8Pc5",
            "tags": [
              "latest"
            ],
            "preset": "with-synthetix-omnibus",
            "settings": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B",
              "salt": "",
              "symbol": "TKN"
            },
            "contracts": {
              "MintableToken": {
                "address": "0x1621c378BA5105043500aCbd6eE8489632F6d0b0",
                "abi": [
                  "constructor(address owner, string name, string symbol, uint8 tokenDecimals, uint256 initialSupply) payable",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function mint(uint256 amount, address to)",
                  "function name() view returns (string)",
                  "function owner() view returns (address)",
                  "function renounceOwnership()",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
                  "function transferOwnership(address newOwner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)"
                ],
                "constructorArgs": [
                  "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B",
                  "Fake WBTC",
                  "fWBTC",
                  "18",
                  "0"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x1b8651fd4e317a5db7d32948c2f8d8e721cc4ab236518a713cc3bf6046248fc9",
                "sourceName": "src/MintableToken.sol",
                "contractName": "MintableToken",
                "deployedOn": "contract.MintableToken",
                "highlight": true,
                "gasUsed": 774785,
                "gasCost": "1000577577"
              }
            },
            "extras": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B",
              "salt": "",
              "symbol": "TKN"
            }
          }
        }
      },
      "version": 7
    },
    "provision.weth_mock_collateral": {
      "artifacts": {
        "imports": {
          "weth_mock_collateral": {
            "url": "ipfs://Qmd9ceWmPPh9mNzvaYwULc6tBMfHb2meVN1kKqsj5WruzW",
            "tags": [
              "latest"
            ],
            "preset": "with-synthetix-omnibus",
            "settings": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B",
              "salt": "",
              "symbol": "TKN"
            },
            "contracts": {
              "MintableToken": {
                "address": "0x6167abDeFB6F9FE83860B415db0Da20124246372",
                "abi": [
                  "constructor(address owner, string name, string symbol, uint8 tokenDecimals, uint256 initialSupply) payable",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function mint(uint256 amount, address to)",
                  "function name() view returns (string)",
                  "function owner() view returns (address)",
                  "function renounceOwnership()",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
                  "function transferOwnership(address newOwner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)"
                ],
                "constructorArgs": [
                  "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B",
                  "Fake WETH",
                  "fWETH",
                  "18",
                  "0"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x5488e1a72dd9c9509e78e9a3a217f65b08241489705c57ffa933c3fac09827b1",
                "sourceName": "src/MintableToken.sol",
                "contractName": "MintableToken",
                "deployedOn": "contract.MintableToken",
                "highlight": true,
                "gasUsed": 774785,
                "gasCost": "1000644282"
              }
            },
            "extras": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B",
              "salt": "",
              "symbol": "TKN"
            }
          }
        }
      },
      "version": 7
    },
    "setting.deployer": {
      "artifacts": {
        "settings": {
          "deployer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
        }
      },
      "hash": "d9b9f9b6eb9d808c78d968fa7e00863d",
      "version": 7
    },
    "setting.pool_owner": {
      "artifacts": {
        "settings": {
          "pool_owner": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
        }
      },
      "hash": "d9b9f9b6eb9d808c78d968fa7e00863d",
      "version": 7
    },
    "invoke.OracleManger_registerNode_wbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManger_registerNode_wbtc": {
            "hash": "0xb8577c122e2fa523c662ecbb8b7650996ceca9fd5fab971c6ca5668072876b82",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x074c76efc670c1aece54358233fb2227e7f7e5a67a15ad17af98ebfea8576ecf",
                    3,
                    "0x0000000000000000000000001b44f3514812d835eb1bdb0acb33d3fa3351ee4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManger_registerNode_wbtc",
            "gasUsed": 155145,
            "gasCost": "1000634263",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {
          "wbtc_oracle_node_id": "0x074c76efc670c1aece54358233fb2227e7f7e5a67a15ad17af98ebfea8576ecf"
        }
      },
      "hash": "228e647384edf638a57e7ad9221569b5",
      "version": 7
    },
    "invoke.permitCreatePool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "permitCreatePool": {
            "hash": "0xac698c2b744896447a793966c7330d8602898cdb8fe3ba70e67a6c9ccc24158e",
            "events": {
              "FeatureFlagAllowlistAdded": [
                {
                  "name": "FeatureFlagAllowlistAdded",
                  "args": [
                    "0x637265617465506f6f6c00000000000000000000000000000000000000000000",
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.permitCreatePool",
            "gasUsed": 101585,
            "gasCost": "1000631283",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "521bb6b1a0cef2e19caa67fc04b6286d",
      "version": 7
    },
    "invoke.registerEthOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerEthOracleNode": {
            "hash": "0x9a82c977fd5b230ddba45a80bc7c7f7cd92e70299e4f322d3db5cd65f3a02c3b",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa1ad04e5fe674fe144be389adb9340f0b15e73d866da4e70145eec4ef867955b",
                    3,
                    "0x000000000000000000000000694aa1769357215de4fac081bf1f309adc32530600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerEthOracleNode",
            "gasUsed": 155145,
            "gasCost": "1000626151",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {
          "eth_oracle_id": "0xa1ad04e5fe674fe144be389adb9340f0b15e73d866da4e70145eec4ef867955b"
        }
      },
      "hash": "d8a46fc86fc795e348ffbeeb8388e348",
      "version": 7
    },
    "invoke.registerSnxOracleManagerNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSnxOracleManagerNode": {
            "hash": "0xe9e88febb59acaf1102073063cde1abe6a62edccb1f7833284a06091b53253e4",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd2ecd19ffabdec991a3ed919bc2565574bf2bb7a0fb09de7413c3115c5d15778",
                    3,
                    "0x000000000000000000000000c0f82a46033b8bdba4bb0b0e28bc2006f64355bc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSnxOracleManagerNode",
            "gasUsed": 155145,
            "gasCost": "1000628408",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {
          "snx_oracle_id_raw": "0xd2ecd19ffabdec991a3ed919bc2565574bf2bb7a0fb09de7413c3115c5d15778"
        }
      },
      "hash": "bcea660bfde0884db28d16f836cddf8d",
      "version": 7
    },
    "invoke.setAccountTimeoutWithdraw": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setAccountTimeoutWithdraw": {
            "hash": "0x00a73c789ee207c1ff96bdadba859142f47c34c55fd6d4e8dc533242629abf13",
            "events": {},
            "deployedOn": "invoke.setAccountTimeoutWithdraw",
            "gasUsed": 54931,
            "gasCost": "1000678898",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "1ee00257f2a5c4a9263e365f0a7e682a",
      "version": 7
    },
    "invoke.setMinimumLiquidityRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setMinimumLiquidityRatio": {
            "hash": "0x0508352ed8f27bb30dc3b764b1c182452ea84ac591547b6c344a9697df95f763",
            "events": {
              "SetMinLiquidityRatio": [
                {
                  "name": "SetMinLiquidityRatio",
                  "args": [
                    "2000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setMinimumLiquidityRatio",
            "gasUsed": 55724,
            "gasCost": "1000672172",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "45fc1d3c060992f0405d8d1ce6e39426",
      "version": 7
    },
    "provision.bfp_market_factory": {
      "artifacts": {
        "imports": {
          "bfp_market_factory": {
            "url": "ipfs://QmdGx5Wg7SJDtLQfxbxk3W6G84WUJDxq8XNdcK1dgTRwjG",
            "tags": [
              "latest"
            ],
            "preset": "carina",
            "contracts": {
              "CoreModule": {
                "address": "0x1f837a979FB63c0255f5f4D879E98412FaB35926",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x958639827d407f581a50b7fb744dff03aa91014edc2eeabadfd411af717a3deb",
                "sourceName": "contracts/modules/CoreModule.sol",
                "contractName": "CoreModule",
                "deployedOn": "contract.CoreModule",
                "gasUsed": 940287,
                "gasCost": "1000647321"
              },
              "FeatureFlagModule": {
                "address": "0xeB6a83c0e9Fd90f0943fF73b81A9bdAC4Afbb291",
                "abi": [
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "event PerpMarketSuspended(bool suspended)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function enableAllFeatures()",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "function suspendAllFeatures()"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x675d9dbcae71db7e96beb919a1b9c38d7b985cd899d6bffbba01b86d9b5cfb3b",
                "sourceName": "contracts/modules/FeatureFlagModule.sol",
                "contractName": "FeatureFlagModule",
                "deployedOn": "contract.FeatureFlagModule",
                "gasUsed": 939197,
                "gasCost": "1000695444"
              },
              "MarketConfigurationModule": {
                "address": "0xBF6e0BBa339c06f017CC953BAe3f96aDF8fE978a",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error Unauthorized(address addr)",
                  "event GlobalMarketConfigured(address indexed from)",
                  "event MarketConfigured(uint128 indexed marketId, address indexed from)",
                  "function getMarketConfiguration() pure returns (tuple(address pyth, bytes32 ethOracleNodeId, address rewardDistributorImplementation, uint64 pythPublishTimeMin, uint64 pythPublishTimeMax, uint64 minOrderAge, uint64 maxOrderAge, uint256 minKeeperFeeUsd, uint256 maxKeeperFeeUsd, uint128 keeperProfitMarginUsd, uint128 keeperProfitMarginPercent, uint128 keeperSettlementGasUnits, uint128 keeperCancellationGasUnits, uint128 keeperLiquidationGasUnits, uint128 keeperFlagGasUnits, uint128 keeperLiquidateMarginGasUnits, address keeperLiquidationEndorsed, uint128 collateralDiscountScalar, uint128 minCollateralDiscount, uint128 maxCollateralDiscount, uint128 utilizationBreakpointPercent, uint128 lowUtilizationSlopePercent, uint128 highUtilizationSlopePercent))",
                  "function getMarketConfigurationById(uint128 marketId) pure returns (tuple(bytes32 oracleNodeId, bytes32 pythPriceFeedId, uint128 makerFee, uint128 takerFee, uint128 maxMarketSize, uint128 maxFundingVelocity, uint128 skewScale, uint128 fundingVelocityClamp, uint128 minCreditPercent, uint256 minMarginUsd, uint256 minMarginRatio, uint256 incrementalMarginScalar, uint256 maintenanceMarginScalar, uint256 maxInitialMarginRatio, uint256 liquidationRewardPercent, uint128 liquidationLimitScalar, uint128 liquidationWindowDuration, uint128 liquidationMaxPd))",
                  "function setMarketConfiguration(tuple(uint64 pythPublishTimeMin, uint64 pythPublishTimeMax, uint64 minOrderAge, uint64 maxOrderAge, uint256 minKeeperFeeUsd, uint256 maxKeeperFeeUsd, uint128 keeperProfitMarginPercent, uint128 keeperProfitMarginUsd, uint128 keeperSettlementGasUnits, uint128 keeperCancellationGasUnits, uint128 keeperLiquidationGasUnits, uint128 keeperFlagGasUnits, uint128 keeperLiquidateMarginGasUnits, address keeperLiquidationEndorsed, uint128 collateralDiscountScalar, uint128 minCollateralDiscount, uint128 maxCollateralDiscount, uint128 utilizationBreakpointPercent, uint128 lowUtilizationSlopePercent, uint128 highUtilizationSlopePercent) data)",
                  "function setMarketConfigurationById(tuple(uint128 marketId, bytes32 oracleNodeId, bytes32 pythPriceFeedId, uint128 makerFee, uint128 takerFee, uint128 maxMarketSize, uint128 maxFundingVelocity, uint128 skewScale, uint128 fundingVelocityClamp, uint128 minCreditPercent, uint256 minMarginUsd, uint256 minMarginRatio, uint256 incrementalMarginScalar, uint256 maintenanceMarginScalar, uint256 maxInitialMarginRatio, uint256 liquidationRewardPercent, uint128 liquidationLimitScalar, uint128 liquidationWindowDuration, uint128 liquidationMaxPd) data)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x3bc96daa885ae0347da132d55cc441ec96023f1f7735954403677b0c4239688d",
                "sourceName": "contracts/modules/MarketConfigurationModule.sol",
                "contractName": "MarketConfigurationModule",
                "deployedOn": "contract.MarketConfigurationModule",
                "gasUsed": 1029248,
                "gasCost": "1000733615"
              },
              "PerpRewardDistributor": {
                "address": "0xb0C1b6f0eFA6bDFFA958fC65bdC0bBD74E3d66aD",
                "abi": [
                  "constructor()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficientRewardBalance(uint256 amount, uint256 balance)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error Unauthorized(address addr)",
                  "event Initialized(uint8 version)",
                  "function distributeRewards(address collateralType, uint256 amount)",
                  "function getPoolCollateralTypes() view returns (address[])",
                  "function getPoolId() view returns (uint128)",
                  "function initialize(address rewardManager, address perpMarket, uint128 poolId_, address[] poolCollateralTypes_, address payoutToken_, string name_)",
                  "function name() view returns (string)",
                  "function onPositionUpdated(uint128, uint128, address, uint256) pure",
                  "function payout(uint128, uint128 poolId, address, address payoutTarget_, uint256 payoutAmount_) returns (bool)",
                  "function setShouldFailPayout(bool _shouldFailedPayout)",
                  "function shouldFailPayout() view returns (bool)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function token() view returns (address)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x2e26839e85e494a4402f7b54712fb2976af0f33ac09c19a2149db01caaba67f1",
                "sourceName": "contracts/modules/PerpRewardDistributorModule/PerpRewardDistributor.sol",
                "contractName": "PerpRewardDistributor",
                "deployedOn": "contract.PerpRewardDistributor",
                "gasUsed": 995684,
                "gasCost": "1000738012"
              },
              "SettlementHookModule": {
                "address": "0x98662d7BaD3e1564549184D0D397a739C757A1FF",
                "abi": [
                  "error InvalidHook(address hook)",
                  "error Unauthorized(address addr)",
                  "event SettlementHookConfigured(address indexed from, uint256 hooks)",
                  "function getSettlementHookConfiguration() view returns (tuple(address[] whitelistedHookAddresses, uint32 maxHooksPerOrder))",
                  "function isSettlementHookWhitelisted(address hook) view returns (bool)",
                  "function setSettlementHookConfiguration(tuple(address[] whitelistedHookAddresses, uint32 maxHooksPerOrder) data)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x60cf1a29e86d4bfcc3c0fe9f33434173e0ab51df6d52d636453694c51ed7b27a",
                "sourceName": "contracts/modules/SettlementHookModule.sol",
                "contractName": "SettlementHookModule",
                "deployedOn": "contract.SettlementHookModule",
                "gasUsed": 528390,
                "gasCost": "1000741270"
              },
              "InitialBfpMarketProxy": {
                "address": "0xEf654C46c8f33c7F6b0db04BF64DFd5f228c35d4",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x1f837a979FB63c0255f5f4D879E98412FaB35926",
                  "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x2aefd689c434f1951678671cbf9f7a84ab79bbe2505a65bf269567efabaa0368",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialBfpMarketProxy",
                "gasUsed": 248149,
                "gasCost": "1000807222"
              },
              "LiquidationModule": {
                "address": "0xd8cBe847E1DFd006fF9c5812A10f204Bf028aa62",
                "abi": [
                  "constructor(address _synthetix)",
                  "error AccountNotFound(uint128 accountId)",
                  "error CannotLiquidateMargin()",
                  "error CannotLiquidatePosition()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidCoreAddress(address synthetixCore)",
                  "error LiquidationZeroCapacity()",
                  "error MarketNotFound(uint128 marketId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PositionFlagged()",
                  "error PositionNotFlagged()",
                  "error PositionNotFound()",
                  "event FundingRecomputed(uint128 indexed marketId, int128 skew, int128 fundingRate, int128 fundingVelocity)",
                  "event MarginLiquidated(uint128 indexed accountId, uint128 indexed marketId, uint256 keeperReward)",
                  "event MarketSizeUpdated(uint128 indexed marketId, uint128 size, int128 skew)",
                  "event OrderCanceled(uint128 indexed accountId, uint128 indexed marketId, uint256 keeperFee, uint64 commitmentTime)",
                  "event PositionFlaggedLiquidation(uint128 indexed accountId, uint128 indexed marketId, address flagger, uint256 flagKeeperReward, uint256 flaggedPrice)",
                  "event PositionLiquidated(uint128 indexed accountId, uint128 indexed marketId, int128 sizeBeforeLiquidation, int128 remainingSize, address keeper, address flagger, uint256 liqKeeperFee, uint256 liquidationPrice)",
                  "event UtilizationRecomputed(uint128 indexed marketId, int128 skew, uint128 utilizationRate)",
                  "function flagPosition(uint128 accountId, uint128 marketId)",
                  "function getHealthFactor(uint128 accountId, uint128 marketId) view returns (uint256)",
                  "function getLiquidationFees(uint128 accountId, uint128 marketId) view returns (uint256 flagKeeperReward, uint256 liqKeeperFee)",
                  "function getLiquidationMarginUsd(uint128 accountId, uint128 marketId, int128 sizeDelta) view returns (uint256 im, uint256 mm)",
                  "function getRemainingLiquidatableSizeCapacity(uint128 marketId) view returns (uint128 maxLiquidatableCapacity, uint128 remainingCapacity, uint128 lastLiquidationTimestamp)",
                  "function isMarginLiquidatable(uint128 accountId, uint128 marketId) view returns (bool)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 marketId) view returns (bool)",
                  "function liquidateMarginOnly(uint128 accountId, uint128 marketId)",
                  "function liquidatePosition(uint128 accountId, uint128 marketId)"
                ],
                "constructorArgs": [
                  "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xc6ac809aca319b5e1c1e2abe1a63e11d893471c23c58a9aafa917d12e9bd2ba8",
                "sourceName": "contracts/modules/LiquidationModule.sol",
                "contractName": "LiquidationModule",
                "deployedOn": "contract.LiquidationModule",
                "gasUsed": 3676487,
                "gasCost": "1000759415"
              },
              "MarginModule": {
                "address": "0xEEf7a908DA476BbD2b1B0B329A93D048A39D1902",
                "abi": [
                  "constructor(address _synthetix)",
                  "error AccountNotFound(uint128 accountId)",
                  "error ArrayLengthMismatch()",
                  "error CanLiquidatePosition()",
                  "error DebtFound(uint128 accountId, uint128 marketId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCollateral(address collateralAddress, uint256 available, uint256 value)",
                  "error InsufficientMargin()",
                  "error InvalidCoreAddress(address synthetixCore)",
                  "error InvalidRewardDistributor(address distributor)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MaxCollateralExceeded(uint256 value, uint256 max)",
                  "error MissingRequiredCollateral(address collateralAddress)",
                  "error NilCollateral()",
                  "error NoDebt()",
                  "error OrderFound()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionFlagged()",
                  "error PositionFound(uint128 accountId, uint128 marketId)",
                  "error Unauthorized(address addr)",
                  "error UnsupportedCollateral(address collateralAddress)",
                  "error ZeroAmount()",
                  "event DebtPaid(uint128 indexed accountId, uint128 indexed marketId, uint128 oldDebt, uint128 newDebt, uint128 paidFromUsdCollateral)",
                  "event FundingRecomputed(uint128 indexed marketId, int128 skew, int128 fundingRate, int128 fundingVelocity)",
                  "event MarginCollateralConfigured(address indexed from, uint256 collaterals)",
                  "event MarginDeposit(address indexed from, address indexed to, uint256 value, address collateralAddress)",
                  "event MarginWithdraw(address indexed from, address indexed to, uint256 value, address collateralAddress)",
                  "event MarketSizeUpdated(uint128 indexed marketId, uint128 size, int128 skew)",
                  "event OrderCanceled(uint128 indexed accountId, uint128 indexed marketId, uint256 keeperFee, uint64 commitmentTime)",
                  "event UtilizationRecomputed(uint128 indexed marketId, int128 skew, uint128 utilizationRate)",
                  "function getDiscountedCollateralPrice(address collateralAddress, uint256 amount) view returns (uint256)",
                  "function getMarginCollateralConfiguration() view returns (tuple(address collateralAddress, bytes32 oracleNodeId, uint128 maxAllowable, uint128 skewScale, address rewardDistributor)[])",
                  "function getMarginDigest(uint128 accountId, uint128 marketId) view returns (tuple(uint256 discountedMarginUsd, uint256 marginUsd, uint256 discountedCollateralUsd, uint256 collateralUsd))",
                  "function getMarginLiquidationOnlyReward(uint128 accountId, uint128 marketId) view returns (uint256)",
                  "function getNetAssetValue(uint128 accountId, uint128 marketId, uint256 oraclePrice) view returns (uint256)",
                  "function getWithdrawableMargin(uint128 accountId, uint128 marketId) view returns (uint256)",
                  "function modifyCollateral(uint128 accountId, uint128 marketId, address collateralAddress, int256 amountDelta)",
                  "function payDebt(uint128 accountId, uint128 marketId, uint128 amount)",
                  "function setCollateralMaxAllowable(address collateralAddress, uint128 maxAllowable)",
                  "function setMarginCollateralConfiguration(address[] collateralAddresses, bytes32[] oracleNodeIds, uint128[] maxAllowables, uint128[] skewScales, address[] rewardDistributors)",
                  "function withdrawAllCollateral(uint128 accountId, uint128 marketId)"
                ],
                "constructorArgs": [
                  "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x5e09d261b6b4128b0d4c3b7daad07cf2d9dca0b933a65976ef698f7711d07ad6",
                "sourceName": "contracts/modules/MarginModule.sol",
                "contractName": "MarginModule",
                "deployedOn": "contract.MarginModule",
                "gasUsed": 4007316,
                "gasCost": "1000820484"
              },
              "OrderModule": {
                "address": "0x8a4a936B6706a58925695370e16Ce71A0C6B005F",
                "abi": [
                  "constructor(address _synthetix)",
                  "error AccountNotFound(uint128 accountId)",
                  "error CanLiquidatePosition()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientLiquidity()",
                  "error InsufficientMargin()",
                  "error InvalidCoreAddress(address synthetixCore)",
                  "error InvalidHook(address hook)",
                  "error InvalidPrice()",
                  "error MarketNotFound(uint128 marketId)",
                  "error MaxHooksExceeded()",
                  "error MaxMarketSizeExceeded()",
                  "error NilOrder()",
                  "error OrderFound()",
                  "error OrderNotFound()",
                  "error OrderNotReady()",
                  "error OrderNotStale()",
                  "error OrderStale()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionFlagged()",
                  "error PriceToleranceExceeded(int128 sizeDelta, uint256 price, uint256 limitPrice)",
                  "error PriceToleranceNotExceeded(int128 sizeDelta, uint256 price, uint256 limitPrice)",
                  "event FundingRecomputed(uint128 indexed marketId, int128 skew, int128 fundingRate, int128 fundingVelocity)",
                  "event MarketSizeUpdated(uint128 indexed marketId, uint128 size, int128 skew)",
                  "event OrderCanceled(uint128 indexed accountId, uint128 indexed marketId, uint256 keeperFee, uint64 commitmentTime)",
                  "event OrderCommitted(uint128 indexed accountId, uint128 indexed marketId, uint64 commitmentTime, int128 sizeDelta, uint256 estimatedOrderFee, uint256 estimatedKeeperFee)",
                  "event OrderSettled(uint128 indexed accountId, uint128 indexed marketId, uint64 settlementTime, int128 sizeDelta, uint256 orderFee, uint256 keeperFee, int128 accruedFunding, uint128 accruedUtilization, int256 pnl, uint256 fillPrice, uint128 accountDebt)",
                  "event OrderSettlementHookExecuted(uint128 indexed accountId, uint128 indexed marketId, address hook)",
                  "event UtilizationRecomputed(uint128 indexed marketId, int128 skew, uint128 utilizationRate)",
                  "function cancelOrder(uint128 accountId, uint128 marketId, bytes priceUpdateData) payable",
                  "function cancelStaleOrder(uint128 accountId, uint128 marketId)",
                  "function commitOrder(uint128 accountId, uint128 marketId, int128 sizeDelta, uint256 limitPrice, uint128 keeperFeeBufferUsd, address[] hooks)",
                  "function getFillPrice(uint128 marketId, int128 size) view returns (uint256)",
                  "function getOraclePrice(uint128 marketId) view returns (uint256)",
                  "function getOrderDigest(uint128 accountId, uint128 marketId) view returns (tuple(int128 sizeDelta, uint64 commitmentTime, uint256 limitPrice, uint128 keeperFeeBufferUsd, address[] hooks, bool isStale, bool isReady))",
                  "function getOrderFees(uint128 marketId, int128 sizeDelta, uint128 keeperFeeBufferUsd) view returns (uint256 orderFee, uint256 keeperFee)",
                  "function settleOrder(uint128 accountId, uint128 marketId, bytes priceUpdateData) payable"
                ],
                "constructorArgs": [
                  "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x700c3a75adeeff0b288dd988d5d2d6567fb7dd267bfd9f36e7167d6c8e6f235a",
                "sourceName": "contracts/modules/OrderModule.sol",
                "contractName": "OrderModule",
                "deployedOn": "contract.OrderModule",
                "gasUsed": 4541337,
                "gasCost": "1000851202"
              },
              "PerpAccountModule": {
                "address": "0xC7f2513d94aC7eE950b5a8c92C385832c93016FA",
                "abi": [
                  "constructor(address _synthetix)",
                  "error AccountNotFound(uint128 accountId)",
                  "error AccountSplitProportionTooLarge()",
                  "error CanLiquidatePosition()",
                  "error CollateralFound()",
                  "error DuplicateAccountIds()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientMargin()",
                  "error InvalidCoreAddress(address synthetixCore)",
                  "error InvalidHook(address hook)",
                  "error InvalidPositionSide()",
                  "error MarketNotFound(uint128 marketId)",
                  "error OrderFound()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionFlagged()",
                  "error PositionFound(uint128 accountId, uint128 marketId)",
                  "error PositionNotFound()",
                  "error ZeroProportion()",
                  "event AccountSplit(uint128 indexed fromId, uint128 indexed toId, uint128 indexed marketId)",
                  "event AccountsMerged(uint128 indexed fromId, uint128 indexed toId, uint128 indexed marketId)",
                  "function getAccountDigest(uint128 accountId, uint128 marketId) view returns (tuple(tuple(address collateralAddress, uint256 available, uint256 oraclePrice)[] depositedCollaterals, uint256 collateralUsd, uint128 debtUsd, tuple(uint128 accountId, uint128 marketId, uint256 remainingMarginUsd, uint256 healthFactor, uint256 notionalValueUsd, int256 pnl, int128 accruedFunding, uint128 accruedUtilization, uint256 entryPythPrice, uint256 entryPrice, uint256 oraclePrice, int128 size, uint256 im, uint256 mm) position))",
                  "function getPositionDigest(uint128 accountId, uint128 marketId) view returns (tuple(uint128 accountId, uint128 marketId, uint256 remainingMarginUsd, uint256 healthFactor, uint256 notionalValueUsd, int256 pnl, int128 accruedFunding, uint128 accruedUtilization, uint256 entryPythPrice, uint256 entryPrice, uint256 oraclePrice, int128 size, uint256 im, uint256 mm))",
                  "function mergeAccounts(uint128 fromId, uint128 toId, uint128 marketId)",
                  "function splitAccount(uint128 fromId, uint128 toId, uint128 marketId, uint128 proportion)"
                ],
                "constructorArgs": [
                  "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xf80236f6e2e55bea516c3b3dd4b0bcaa8e2e1f4c1a21a46e4b41bc962acbf61a",
                "sourceName": "contracts/modules/PerpAccountModule.sol",
                "contractName": "PerpAccountModule",
                "deployedOn": "contract.PerpAccountModule",
                "gasUsed": 3122332,
                "gasCost": "1000877843"
              },
              "PerpMarketFactoryModule": {
                "address": "0xBbcfE67866eCE5Ff8516070C32F1D97fc3A14d30",
                "abi": [
                  "constructor(address _synthetix)",
                  "error InvalidCoreAddress(address synthetixCore)",
                  "error MarketNotFound(uint128 marketId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error Unauthorized(address addr)",
                  "event FundingRecomputed(uint128 indexed marketId, int128 skew, int128 fundingRate, int128 fundingVelocity)",
                  "event MarketCreated(uint128 indexed id, bytes32 name)",
                  "event MarketSizeUpdated(uint128 indexed marketId, uint128 size, int128 skew)",
                  "event OrderCanceled(uint128 indexed accountId, uint128 indexed marketId, uint256 keeperFee, uint64 commitmentTime)",
                  "event UtilizationRecomputed(uint128 indexed marketId, int128 skew, uint128 utilizationRate)",
                  "function createMarket(tuple(bytes32 name) data) returns (uint128)",
                  "function getActiveMarketIds() view returns (uint128[])",
                  "function getMarketDigest(uint128 marketId) view returns (tuple(tuple(address collateralAddress, uint256 available)[] depositedCollaterals, bytes32 name, int128 skew, uint128 size, uint256 oraclePrice, int128 fundingVelocity, int128 fundingRate, uint128 utilizationRate, uint128 remainingLiquidatableSizeCapacity, uint128 lastLiquidationTime, uint128 totalTraderDebtUsd, uint256 totalCollateralValueUsd, int128 debtCorrection))",
                  "function getUtilizationDigest(uint128 marketId) view returns (tuple(uint128 lastComputedUtilizationRate, uint64 lastComputedTimestamp, uint128 currentUtilizationRate, uint256 utilization))",
                  "function minimumCredit(uint128 marketId) view returns (uint256)",
                  "function name(uint128) pure returns (string)",
                  "function recomputeFunding(uint128 marketId)",
                  "function recomputeUtilization(uint128 marketId)",
                  "function reportedDebt(uint128 marketId) view returns (uint256)",
                  "function setEthOracleNodeId(bytes32 ethOracleNodeId)",
                  "function setPyth(address pyth)",
                  "function setRewardDistributorImplementation(address implementation)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                ],
                "constructorArgs": [
                  "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x8433745a50edc4526d076b3067fd7d0d1f9edf9c60d4c8c391c5ed7be4587735",
                "sourceName": "contracts/modules/PerpMarketFactoryModule.sol",
                "contractName": "PerpMarketFactoryModule",
                "deployedOn": "contract.PerpMarketFactoryModule",
                "gasUsed": 2064236,
                "gasCost": "1000920309"
              },
              "PerpRewardDistributorFactoryModule": {
                "address": "0x2B394b2c8328262270B038C1B66aCA6369205365",
                "abi": [
                  "constructor(address _synthetix)",
                  "error InvalidCoreAddress(address synthetixCore)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "error ZeroLength()",
                  "event RewardDistributorCreated(address indexed distributor)",
                  "function createRewardDistributor(tuple(uint128 poolId, address[] collateralTypes, string name, address token) data) returns (address)"
                ],
                "constructorArgs": [
                  "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x4ad015e4e0cb0b62ed07c18c91266daedb97dcf93c52cd26f88f0e58b99ff8d2",
                "sourceName": "contracts/modules/PerpRewardDistributorModule/PerpRewardDistributorFactoryModule.sol",
                "contractName": "PerpRewardDistributorFactoryModule",
                "deployedOn": "contract.PerpRewardDistributorFactoryModule",
                "gasUsed": 436159,
                "gasCost": "1000921080"
              },
              "BfpMarketRouter": {
                "address": "0xc0ad56285e1451b38fb0e3b99d679bd90dd659c2",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "event PerpMarketSuspended(bool suspended)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function enableAllFeatures()",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "function suspendAllFeatures()",
                  "constructor(address _synthetix)",
                  "error InvalidCoreAddress(address synthetixCore)",
                  "error MarketNotFound(uint128 marketId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "event FundingRecomputed(uint128 indexed marketId, int128 skew, int128 fundingRate, int128 fundingVelocity)",
                  "event MarketCreated(uint128 indexed id, bytes32 name)",
                  "event MarketSizeUpdated(uint128 indexed marketId, uint128 size, int128 skew)",
                  "event OrderCanceled(uint128 indexed accountId, uint128 indexed marketId, uint256 keeperFee, uint64 commitmentTime)",
                  "event UtilizationRecomputed(uint128 indexed marketId, int128 skew, uint128 utilizationRate)",
                  "function createMarket(tuple(bytes32 name) data) returns (uint128)",
                  "function getActiveMarketIds() view returns (uint128[])",
                  "function getMarketDigest(uint128 marketId) view returns (tuple(tuple(address collateralAddress, uint256 available)[] depositedCollaterals, bytes32 name, int128 skew, uint128 size, uint256 oraclePrice, int128 fundingVelocity, int128 fundingRate, uint128 utilizationRate, uint128 remainingLiquidatableSizeCapacity, uint128 lastLiquidationTime, uint128 totalTraderDebtUsd, uint256 totalCollateralValueUsd, int128 debtCorrection))",
                  "function getUtilizationDigest(uint128 marketId) view returns (tuple(uint128 lastComputedUtilizationRate, uint64 lastComputedTimestamp, uint128 currentUtilizationRate, uint256 utilization))",
                  "function minimumCredit(uint128 marketId) view returns (uint256)",
                  "function name(uint128) pure returns (string)",
                  "function recomputeFunding(uint128 marketId)",
                  "function recomputeUtilization(uint128 marketId)",
                  "function reportedDebt(uint128 marketId) view returns (uint256)",
                  "function setEthOracleNodeId(bytes32 ethOracleNodeId)",
                  "function setPyth(address pyth)",
                  "function setRewardDistributorImplementation(address implementation)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event GlobalMarketConfigured(address indexed from)",
                  "event MarketConfigured(uint128 indexed marketId, address indexed from)",
                  "function getMarketConfiguration() pure returns (tuple(address pyth, bytes32 ethOracleNodeId, address rewardDistributorImplementation, uint64 pythPublishTimeMin, uint64 pythPublishTimeMax, uint64 minOrderAge, uint64 maxOrderAge, uint256 minKeeperFeeUsd, uint256 maxKeeperFeeUsd, uint128 keeperProfitMarginUsd, uint128 keeperProfitMarginPercent, uint128 keeperSettlementGasUnits, uint128 keeperCancellationGasUnits, uint128 keeperLiquidationGasUnits, uint128 keeperFlagGasUnits, uint128 keeperLiquidateMarginGasUnits, address keeperLiquidationEndorsed, uint128 collateralDiscountScalar, uint128 minCollateralDiscount, uint128 maxCollateralDiscount, uint128 utilizationBreakpointPercent, uint128 lowUtilizationSlopePercent, uint128 highUtilizationSlopePercent))",
                  "function getMarketConfigurationById(uint128 marketId) pure returns (tuple(bytes32 oracleNodeId, bytes32 pythPriceFeedId, uint128 makerFee, uint128 takerFee, uint128 maxMarketSize, uint128 maxFundingVelocity, uint128 skewScale, uint128 fundingVelocityClamp, uint128 minCreditPercent, uint256 minMarginUsd, uint256 minMarginRatio, uint256 incrementalMarginScalar, uint256 maintenanceMarginScalar, uint256 maxInitialMarginRatio, uint256 liquidationRewardPercent, uint128 liquidationLimitScalar, uint128 liquidationWindowDuration, uint128 liquidationMaxPd))",
                  "function setMarketConfiguration(tuple(uint64 pythPublishTimeMin, uint64 pythPublishTimeMax, uint64 minOrderAge, uint64 maxOrderAge, uint256 minKeeperFeeUsd, uint256 maxKeeperFeeUsd, uint128 keeperProfitMarginPercent, uint128 keeperProfitMarginUsd, uint128 keeperSettlementGasUnits, uint128 keeperCancellationGasUnits, uint128 keeperLiquidationGasUnits, uint128 keeperFlagGasUnits, uint128 keeperLiquidateMarginGasUnits, address keeperLiquidationEndorsed, uint128 collateralDiscountScalar, uint128 minCollateralDiscount, uint128 maxCollateralDiscount, uint128 utilizationBreakpointPercent, uint128 lowUtilizationSlopePercent, uint128 highUtilizationSlopePercent) data)",
                  "function setMarketConfigurationById(tuple(uint128 marketId, bytes32 oracleNodeId, bytes32 pythPriceFeedId, uint128 makerFee, uint128 takerFee, uint128 maxMarketSize, uint128 maxFundingVelocity, uint128 skewScale, uint128 fundingVelocityClamp, uint128 minCreditPercent, uint256 minMarginUsd, uint256 minMarginRatio, uint256 incrementalMarginScalar, uint256 maintenanceMarginScalar, uint256 maxInitialMarginRatio, uint256 liquidationRewardPercent, uint128 liquidationLimitScalar, uint128 liquidationWindowDuration, uint128 liquidationMaxPd) data)",
                  "error AccountNotFound(uint128 accountId)",
                  "error AccountSplitProportionTooLarge()",
                  "error CanLiquidatePosition()",
                  "error CollateralFound()",
                  "error DuplicateAccountIds()",
                  "error InsufficientMargin()",
                  "error InvalidHook(address hook)",
                  "error InvalidPositionSide()",
                  "error OrderFound()",
                  "error OverflowInt128ToUint128()",
                  "error PositionFlagged()",
                  "error PositionFound(uint128 accountId, uint128 marketId)",
                  "error PositionNotFound()",
                  "error ZeroProportion()",
                  "event AccountSplit(uint128 indexed fromId, uint128 indexed toId, uint128 indexed marketId)",
                  "event AccountsMerged(uint128 indexed fromId, uint128 indexed toId, uint128 indexed marketId)",
                  "function getAccountDigest(uint128 accountId, uint128 marketId) view returns (tuple(tuple(address collateralAddress, uint256 available, uint256 oraclePrice)[] depositedCollaterals, uint256 collateralUsd, uint128 debtUsd, tuple(uint128 accountId, uint128 marketId, uint256 remainingMarginUsd, uint256 healthFactor, uint256 notionalValueUsd, int256 pnl, int128 accruedFunding, uint128 accruedUtilization, uint256 entryPythPrice, uint256 entryPrice, uint256 oraclePrice, int128 size, uint256 im, uint256 mm) position))",
                  "function getPositionDigest(uint128 accountId, uint128 marketId) view returns (tuple(uint128 accountId, uint128 marketId, uint256 remainingMarginUsd, uint256 healthFactor, uint256 notionalValueUsd, int256 pnl, int128 accruedFunding, uint128 accruedUtilization, uint256 entryPythPrice, uint256 entryPrice, uint256 oraclePrice, int128 size, uint256 im, uint256 mm))",
                  "function mergeAccounts(uint128 fromId, uint128 toId, uint128 marketId)",
                  "function splitAccount(uint128 fromId, uint128 toId, uint128 marketId, uint128 proportion)",
                  "error ArrayLengthMismatch()",
                  "error DebtFound(uint128 accountId, uint128 marketId)",
                  "error InsufficientCollateral(address collateralAddress, uint256 available, uint256 value)",
                  "error InvalidRewardDistributor(address distributor)",
                  "error MaxCollateralExceeded(uint256 value, uint256 max)",
                  "error MissingRequiredCollateral(address collateralAddress)",
                  "error NilCollateral()",
                  "error NoDebt()",
                  "error UnsupportedCollateral(address collateralAddress)",
                  "error ZeroAmount()",
                  "event DebtPaid(uint128 indexed accountId, uint128 indexed marketId, uint128 oldDebt, uint128 newDebt, uint128 paidFromUsdCollateral)",
                  "event MarginCollateralConfigured(address indexed from, uint256 collaterals)",
                  "event MarginDeposit(address indexed from, address indexed to, uint256 value, address collateralAddress)",
                  "event MarginWithdraw(address indexed from, address indexed to, uint256 value, address collateralAddress)",
                  "function getDiscountedCollateralPrice(address collateralAddress, uint256 amount) view returns (uint256)",
                  "function getMarginCollateralConfiguration() view returns (tuple(address collateralAddress, bytes32 oracleNodeId, uint128 maxAllowable, uint128 skewScale, address rewardDistributor)[])",
                  "function getMarginDigest(uint128 accountId, uint128 marketId) view returns (tuple(uint256 discountedMarginUsd, uint256 marginUsd, uint256 discountedCollateralUsd, uint256 collateralUsd))",
                  "function getMarginLiquidationOnlyReward(uint128 accountId, uint128 marketId) view returns (uint256)",
                  "function getNetAssetValue(uint128 accountId, uint128 marketId, uint256 oraclePrice) view returns (uint256)",
                  "function getWithdrawableMargin(uint128 accountId, uint128 marketId) view returns (uint256)",
                  "function modifyCollateral(uint128 accountId, uint128 marketId, address collateralAddress, int256 amountDelta)",
                  "function payDebt(uint128 accountId, uint128 marketId, uint128 amount)",
                  "function setCollateralMaxAllowable(address collateralAddress, uint128 maxAllowable)",
                  "function setMarginCollateralConfiguration(address[] collateralAddresses, bytes32[] oracleNodeIds, uint128[] maxAllowables, uint128[] skewScales, address[] rewardDistributors)",
                  "function withdrawAllCollateral(uint128 accountId, uint128 marketId)",
                  "error InsufficientLiquidity()",
                  "error InvalidPrice()",
                  "error MaxHooksExceeded()",
                  "error MaxMarketSizeExceeded()",
                  "error NilOrder()",
                  "error OrderNotFound()",
                  "error OrderNotReady()",
                  "error OrderNotStale()",
                  "error OrderStale()",
                  "error PriceToleranceExceeded(int128 sizeDelta, uint256 price, uint256 limitPrice)",
                  "error PriceToleranceNotExceeded(int128 sizeDelta, uint256 price, uint256 limitPrice)",
                  "event OrderCommitted(uint128 indexed accountId, uint128 indexed marketId, uint64 commitmentTime, int128 sizeDelta, uint256 estimatedOrderFee, uint256 estimatedKeeperFee)",
                  "event OrderSettled(uint128 indexed accountId, uint128 indexed marketId, uint64 settlementTime, int128 sizeDelta, uint256 orderFee, uint256 keeperFee, int128 accruedFunding, uint128 accruedUtilization, int256 pnl, uint256 fillPrice, uint128 accountDebt)",
                  "event OrderSettlementHookExecuted(uint128 indexed accountId, uint128 indexed marketId, address hook)",
                  "function cancelOrder(uint128 accountId, uint128 marketId, bytes priceUpdateData) payable",
                  "function cancelStaleOrder(uint128 accountId, uint128 marketId)",
                  "function commitOrder(uint128 accountId, uint128 marketId, int128 sizeDelta, uint256 limitPrice, uint128 keeperFeeBufferUsd, address[] hooks)",
                  "function getFillPrice(uint128 marketId, int128 size) view returns (uint256)",
                  "function getOraclePrice(uint128 marketId) view returns (uint256)",
                  "function getOrderDigest(uint128 accountId, uint128 marketId) view returns (tuple(int128 sizeDelta, uint64 commitmentTime, uint256 limitPrice, uint128 keeperFeeBufferUsd, address[] hooks, bool isStale, bool isReady))",
                  "function getOrderFees(uint128 marketId, int128 sizeDelta, uint128 keeperFeeBufferUsd) view returns (uint256 orderFee, uint256 keeperFee)",
                  "function settleOrder(uint128 accountId, uint128 marketId, bytes priceUpdateData) payable",
                  "error CannotLiquidateMargin()",
                  "error CannotLiquidatePosition()",
                  "error LiquidationZeroCapacity()",
                  "error PositionNotFlagged()",
                  "event MarginLiquidated(uint128 indexed accountId, uint128 indexed marketId, uint256 keeperReward)",
                  "event PositionFlaggedLiquidation(uint128 indexed accountId, uint128 indexed marketId, address flagger, uint256 flagKeeperReward, uint256 flaggedPrice)",
                  "event PositionLiquidated(uint128 indexed accountId, uint128 indexed marketId, int128 sizeBeforeLiquidation, int128 remainingSize, address keeper, address flagger, uint256 liqKeeperFee, uint256 liquidationPrice)",
                  "function flagPosition(uint128 accountId, uint128 marketId)",
                  "function getHealthFactor(uint128 accountId, uint128 marketId) view returns (uint256)",
                  "function getLiquidationFees(uint128 accountId, uint128 marketId) view returns (uint256 flagKeeperReward, uint256 liqKeeperFee)",
                  "function getLiquidationMarginUsd(uint128 accountId, uint128 marketId, int128 sizeDelta) view returns (uint256 im, uint256 mm)",
                  "function getRemainingLiquidatableSizeCapacity(uint128 marketId) view returns (uint128 maxLiquidatableCapacity, uint128 remainingCapacity, uint128 lastLiquidationTimestamp)",
                  "function isMarginLiquidatable(uint128 accountId, uint128 marketId) view returns (bool)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 marketId) view returns (bool)",
                  "function liquidateMarginOnly(uint128 accountId, uint128 marketId)",
                  "function liquidatePosition(uint128 accountId, uint128 marketId)",
                  "error ZeroLength()",
                  "event RewardDistributorCreated(address indexed distributor)",
                  "function createRewardDistributor(tuple(uint128 poolId, address[] collateralTypes, string name, address token) data) returns (address)",
                  "event SettlementHookConfigured(address indexed from, uint256 hooks)",
                  "function getSettlementHookConfiguration() view returns (tuple(address[] whitelistedHookAddresses, uint32 maxHooksPerOrder))",
                  "function isSettlementHookWhitelisted(address hook) view returns (bool)",
                  "function setSettlementHookConfiguration(tuple(address[] whitelistedHookAddresses, uint32 maxHooksPerOrder) data)"
                ],
                "deployedOn": "router.BfpMarketRouter",
                "deployTxnHash": "0x67269387e7f8801a8d2a735692eee27947143b0632ac13f52b9a012ea1b30917",
                "contractName": "BfpMarketRouter",
                "sourceName": "BfpMarketRouter.sol",
                "gasUsed": 944367,
                "gasCost": "1000895025"
              },
              "BfpMarketProxy": {
                "address": "0xEf654C46c8f33c7F6b0db04BF64DFd5f228c35d4",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "event PerpMarketSuspended(bool suspended)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function enableAllFeatures()",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "function suspendAllFeatures()",
                  "constructor(address _synthetix)",
                  "error InvalidCoreAddress(address synthetixCore)",
                  "error MarketNotFound(uint128 marketId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "event FundingRecomputed(uint128 indexed marketId, int128 skew, int128 fundingRate, int128 fundingVelocity)",
                  "event MarketCreated(uint128 indexed id, bytes32 name)",
                  "event MarketSizeUpdated(uint128 indexed marketId, uint128 size, int128 skew)",
                  "event OrderCanceled(uint128 indexed accountId, uint128 indexed marketId, uint256 keeperFee, uint64 commitmentTime)",
                  "event UtilizationRecomputed(uint128 indexed marketId, int128 skew, uint128 utilizationRate)",
                  "function createMarket(tuple(bytes32 name) data) returns (uint128)",
                  "function getActiveMarketIds() view returns (uint128[])",
                  "function getMarketDigest(uint128 marketId) view returns (tuple(tuple(address collateralAddress, uint256 available)[] depositedCollaterals, bytes32 name, int128 skew, uint128 size, uint256 oraclePrice, int128 fundingVelocity, int128 fundingRate, uint128 utilizationRate, uint128 remainingLiquidatableSizeCapacity, uint128 lastLiquidationTime, uint128 totalTraderDebtUsd, uint256 totalCollateralValueUsd, int128 debtCorrection))",
                  "function getUtilizationDigest(uint128 marketId) view returns (tuple(uint128 lastComputedUtilizationRate, uint64 lastComputedTimestamp, uint128 currentUtilizationRate, uint256 utilization))",
                  "function minimumCredit(uint128 marketId) view returns (uint256)",
                  "function name(uint128) pure returns (string)",
                  "function recomputeFunding(uint128 marketId)",
                  "function recomputeUtilization(uint128 marketId)",
                  "function reportedDebt(uint128 marketId) view returns (uint256)",
                  "function setEthOracleNodeId(bytes32 ethOracleNodeId)",
                  "function setPyth(address pyth)",
                  "function setRewardDistributorImplementation(address implementation)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event GlobalMarketConfigured(address indexed from)",
                  "event MarketConfigured(uint128 indexed marketId, address indexed from)",
                  "function getMarketConfiguration() pure returns (tuple(address pyth, bytes32 ethOracleNodeId, address rewardDistributorImplementation, uint64 pythPublishTimeMin, uint64 pythPublishTimeMax, uint64 minOrderAge, uint64 maxOrderAge, uint256 minKeeperFeeUsd, uint256 maxKeeperFeeUsd, uint128 keeperProfitMarginUsd, uint128 keeperProfitMarginPercent, uint128 keeperSettlementGasUnits, uint128 keeperCancellationGasUnits, uint128 keeperLiquidationGasUnits, uint128 keeperFlagGasUnits, uint128 keeperLiquidateMarginGasUnits, address keeperLiquidationEndorsed, uint128 collateralDiscountScalar, uint128 minCollateralDiscount, uint128 maxCollateralDiscount, uint128 utilizationBreakpointPercent, uint128 lowUtilizationSlopePercent, uint128 highUtilizationSlopePercent))",
                  "function getMarketConfigurationById(uint128 marketId) pure returns (tuple(bytes32 oracleNodeId, bytes32 pythPriceFeedId, uint128 makerFee, uint128 takerFee, uint128 maxMarketSize, uint128 maxFundingVelocity, uint128 skewScale, uint128 fundingVelocityClamp, uint128 minCreditPercent, uint256 minMarginUsd, uint256 minMarginRatio, uint256 incrementalMarginScalar, uint256 maintenanceMarginScalar, uint256 maxInitialMarginRatio, uint256 liquidationRewardPercent, uint128 liquidationLimitScalar, uint128 liquidationWindowDuration, uint128 liquidationMaxPd))",
                  "function setMarketConfiguration(tuple(uint64 pythPublishTimeMin, uint64 pythPublishTimeMax, uint64 minOrderAge, uint64 maxOrderAge, uint256 minKeeperFeeUsd, uint256 maxKeeperFeeUsd, uint128 keeperProfitMarginPercent, uint128 keeperProfitMarginUsd, uint128 keeperSettlementGasUnits, uint128 keeperCancellationGasUnits, uint128 keeperLiquidationGasUnits, uint128 keeperFlagGasUnits, uint128 keeperLiquidateMarginGasUnits, address keeperLiquidationEndorsed, uint128 collateralDiscountScalar, uint128 minCollateralDiscount, uint128 maxCollateralDiscount, uint128 utilizationBreakpointPercent, uint128 lowUtilizationSlopePercent, uint128 highUtilizationSlopePercent) data)",
                  "function setMarketConfigurationById(tuple(uint128 marketId, bytes32 oracleNodeId, bytes32 pythPriceFeedId, uint128 makerFee, uint128 takerFee, uint128 maxMarketSize, uint128 maxFundingVelocity, uint128 skewScale, uint128 fundingVelocityClamp, uint128 minCreditPercent, uint256 minMarginUsd, uint256 minMarginRatio, uint256 incrementalMarginScalar, uint256 maintenanceMarginScalar, uint256 maxInitialMarginRatio, uint256 liquidationRewardPercent, uint128 liquidationLimitScalar, uint128 liquidationWindowDuration, uint128 liquidationMaxPd) data)",
                  "error AccountNotFound(uint128 accountId)",
                  "error AccountSplitProportionTooLarge()",
                  "error CanLiquidatePosition()",
                  "error CollateralFound()",
                  "error DuplicateAccountIds()",
                  "error InsufficientMargin()",
                  "error InvalidHook(address hook)",
                  "error InvalidPositionSide()",
                  "error OrderFound()",
                  "error OverflowInt128ToUint128()",
                  "error PositionFlagged()",
                  "error PositionFound(uint128 accountId, uint128 marketId)",
                  "error PositionNotFound()",
                  "error ZeroProportion()",
                  "event AccountSplit(uint128 indexed fromId, uint128 indexed toId, uint128 indexed marketId)",
                  "event AccountsMerged(uint128 indexed fromId, uint128 indexed toId, uint128 indexed marketId)",
                  "function getAccountDigest(uint128 accountId, uint128 marketId) view returns (tuple(tuple(address collateralAddress, uint256 available, uint256 oraclePrice)[] depositedCollaterals, uint256 collateralUsd, uint128 debtUsd, tuple(uint128 accountId, uint128 marketId, uint256 remainingMarginUsd, uint256 healthFactor, uint256 notionalValueUsd, int256 pnl, int128 accruedFunding, uint128 accruedUtilization, uint256 entryPythPrice, uint256 entryPrice, uint256 oraclePrice, int128 size, uint256 im, uint256 mm) position))",
                  "function getPositionDigest(uint128 accountId, uint128 marketId) view returns (tuple(uint128 accountId, uint128 marketId, uint256 remainingMarginUsd, uint256 healthFactor, uint256 notionalValueUsd, int256 pnl, int128 accruedFunding, uint128 accruedUtilization, uint256 entryPythPrice, uint256 entryPrice, uint256 oraclePrice, int128 size, uint256 im, uint256 mm))",
                  "function mergeAccounts(uint128 fromId, uint128 toId, uint128 marketId)",
                  "function splitAccount(uint128 fromId, uint128 toId, uint128 marketId, uint128 proportion)",
                  "error ArrayLengthMismatch()",
                  "error DebtFound(uint128 accountId, uint128 marketId)",
                  "error InsufficientCollateral(address collateralAddress, uint256 available, uint256 value)",
                  "error InvalidRewardDistributor(address distributor)",
                  "error MaxCollateralExceeded(uint256 value, uint256 max)",
                  "error MissingRequiredCollateral(address collateralAddress)",
                  "error NilCollateral()",
                  "error NoDebt()",
                  "error UnsupportedCollateral(address collateralAddress)",
                  "error ZeroAmount()",
                  "event DebtPaid(uint128 indexed accountId, uint128 indexed marketId, uint128 oldDebt, uint128 newDebt, uint128 paidFromUsdCollateral)",
                  "event MarginCollateralConfigured(address indexed from, uint256 collaterals)",
                  "event MarginDeposit(address indexed from, address indexed to, uint256 value, address collateralAddress)",
                  "event MarginWithdraw(address indexed from, address indexed to, uint256 value, address collateralAddress)",
                  "function getDiscountedCollateralPrice(address collateralAddress, uint256 amount) view returns (uint256)",
                  "function getMarginCollateralConfiguration() view returns (tuple(address collateralAddress, bytes32 oracleNodeId, uint128 maxAllowable, uint128 skewScale, address rewardDistributor)[])",
                  "function getMarginDigest(uint128 accountId, uint128 marketId) view returns (tuple(uint256 discountedMarginUsd, uint256 marginUsd, uint256 discountedCollateralUsd, uint256 collateralUsd))",
                  "function getMarginLiquidationOnlyReward(uint128 accountId, uint128 marketId) view returns (uint256)",
                  "function getNetAssetValue(uint128 accountId, uint128 marketId, uint256 oraclePrice) view returns (uint256)",
                  "function getWithdrawableMargin(uint128 accountId, uint128 marketId) view returns (uint256)",
                  "function modifyCollateral(uint128 accountId, uint128 marketId, address collateralAddress, int256 amountDelta)",
                  "function payDebt(uint128 accountId, uint128 marketId, uint128 amount)",
                  "function setCollateralMaxAllowable(address collateralAddress, uint128 maxAllowable)",
                  "function setMarginCollateralConfiguration(address[] collateralAddresses, bytes32[] oracleNodeIds, uint128[] maxAllowables, uint128[] skewScales, address[] rewardDistributors)",
                  "function withdrawAllCollateral(uint128 accountId, uint128 marketId)",
                  "error InsufficientLiquidity()",
                  "error InvalidPrice()",
                  "error MaxHooksExceeded()",
                  "error MaxMarketSizeExceeded()",
                  "error NilOrder()",
                  "error OrderNotFound()",
                  "error OrderNotReady()",
                  "error OrderNotStale()",
                  "error OrderStale()",
                  "error PriceToleranceExceeded(int128 sizeDelta, uint256 price, uint256 limitPrice)",
                  "error PriceToleranceNotExceeded(int128 sizeDelta, uint256 price, uint256 limitPrice)",
                  "event OrderCommitted(uint128 indexed accountId, uint128 indexed marketId, uint64 commitmentTime, int128 sizeDelta, uint256 estimatedOrderFee, uint256 estimatedKeeperFee)",
                  "event OrderSettled(uint128 indexed accountId, uint128 indexed marketId, uint64 settlementTime, int128 sizeDelta, uint256 orderFee, uint256 keeperFee, int128 accruedFunding, uint128 accruedUtilization, int256 pnl, uint256 fillPrice, uint128 accountDebt)",
                  "event OrderSettlementHookExecuted(uint128 indexed accountId, uint128 indexed marketId, address hook)",
                  "function cancelOrder(uint128 accountId, uint128 marketId, bytes priceUpdateData) payable",
                  "function cancelStaleOrder(uint128 accountId, uint128 marketId)",
                  "function commitOrder(uint128 accountId, uint128 marketId, int128 sizeDelta, uint256 limitPrice, uint128 keeperFeeBufferUsd, address[] hooks)",
                  "function getFillPrice(uint128 marketId, int128 size) view returns (uint256)",
                  "function getOraclePrice(uint128 marketId) view returns (uint256)",
                  "function getOrderDigest(uint128 accountId, uint128 marketId) view returns (tuple(int128 sizeDelta, uint64 commitmentTime, uint256 limitPrice, uint128 keeperFeeBufferUsd, address[] hooks, bool isStale, bool isReady))",
                  "function getOrderFees(uint128 marketId, int128 sizeDelta, uint128 keeperFeeBufferUsd) view returns (uint256 orderFee, uint256 keeperFee)",
                  "function settleOrder(uint128 accountId, uint128 marketId, bytes priceUpdateData) payable",
                  "error CannotLiquidateMargin()",
                  "error CannotLiquidatePosition()",
                  "error LiquidationZeroCapacity()",
                  "error PositionNotFlagged()",
                  "event MarginLiquidated(uint128 indexed accountId, uint128 indexed marketId, uint256 keeperReward)",
                  "event PositionFlaggedLiquidation(uint128 indexed accountId, uint128 indexed marketId, address flagger, uint256 flagKeeperReward, uint256 flaggedPrice)",
                  "event PositionLiquidated(uint128 indexed accountId, uint128 indexed marketId, int128 sizeBeforeLiquidation, int128 remainingSize, address keeper, address flagger, uint256 liqKeeperFee, uint256 liquidationPrice)",
                  "function flagPosition(uint128 accountId, uint128 marketId)",
                  "function getHealthFactor(uint128 accountId, uint128 marketId) view returns (uint256)",
                  "function getLiquidationFees(uint128 accountId, uint128 marketId) view returns (uint256 flagKeeperReward, uint256 liqKeeperFee)",
                  "function getLiquidationMarginUsd(uint128 accountId, uint128 marketId, int128 sizeDelta) view returns (uint256 im, uint256 mm)",
                  "function getRemainingLiquidatableSizeCapacity(uint128 marketId) view returns (uint128 maxLiquidatableCapacity, uint128 remainingCapacity, uint128 lastLiquidationTimestamp)",
                  "function isMarginLiquidatable(uint128 accountId, uint128 marketId) view returns (bool)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 marketId) view returns (bool)",
                  "function liquidateMarginOnly(uint128 accountId, uint128 marketId)",
                  "function liquidatePosition(uint128 accountId, uint128 marketId)",
                  "error ZeroLength()",
                  "event RewardDistributorCreated(address indexed distributor)",
                  "function createRewardDistributor(tuple(uint128 poolId, address[] collateralTypes, string name, address token) data) returns (address)",
                  "event SettlementHookConfigured(address indexed from, uint256 hooks)",
                  "function getSettlementHookConfiguration() view returns (tuple(address[] whitelistedHookAddresses, uint32 maxHooksPerOrder))",
                  "function isSettlementHookWhitelisted(address hook) view returns (bool)",
                  "function setSettlementHookConfiguration(tuple(address[] whitelistedHookAddresses, uint32 maxHooksPerOrder) data)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "PerpAccountProxy": {
                "address": "0xba5F6C36b3f82f823E860a9aB7fe41562D50b99a",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_or_upgrade_nft",
                "gasUsed": 0,
                "gasCost": "0"
              }
            },
            "settings": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "synthetixPackage": "synthetix:latest",
              "synthetixPreset": "main"
            },
            "imports": {
              "synthetix": {
                "url": "ipfs://QmfWpM9UxApK2deXLU81VDF5rZz7FyU4ntt3JqWDNJSALf",
                "contracts": {
                  "AccountModule": {
                    "address": "0x66379373B4df3D93cd6A50114594B66F21b3Aaee",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "error ZeroAddress()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x2348ebe9c5f7ef32a61fedd3fbb7f71362f5bd9542cafb4bd2b90bb077bad89b",
                    "sourceName": "contracts/modules/core/AccountModule.sol",
                    "contractName": "AccountModule",
                    "deployedOn": "contract.AccountModule",
                    "gasUsed": 1209268,
                    "gasCost": "744969657"
                  },
                  "AccountTokenModule": {
                    "address": "0xEa9E9482F6E15cbFaEDe135b181E7b7457596042",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x421cc21505705542ed099edcee3ffafd56ce7679e9f27011ba267c99f41620ab",
                    "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                    "contractName": "AccountTokenModule",
                    "deployedOn": "contract.AccountTokenModule",
                    "gasUsed": 1787656,
                    "gasCost": "745028746"
                  },
                  "AssociateDebtModule": {
                    "address": "0xeDB4D0F1aCBC6fE4665Daf2344c8623989b025F6",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x9363a42222faad684b27d0d97bd8c71abfe74ad51b505e5af9166a948b4bd405",
                    "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                    "contractName": "AssociateDebtModule",
                    "deployedOn": "contract.AssociateDebtModule",
                    "gasUsed": 2287030,
                    "gasCost": "744988838"
                  },
                  "AssociatedSystemsModule": {
                    "address": "0xf74D746816833cF90E1A3fBb3ACD6E61851F2Ec9",
                    "abi": [
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error Unauthorized(address addr)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x96402172e751b9ecf0634b83b8f8527ad7754c35e8d23c68143c7ba3dcd5d389",
                    "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                    "contractName": "AssociatedSystemsModule",
                    "deployedOn": "contract.AssociatedSystemsModule",
                    "gasUsed": 877153,
                    "gasCost": "744980752"
                  },
                  "CcipReceiverModule": {
                    "address": "0x61236a268D0498C2234335975f4E41660b062ff8",
                    "abi": [
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error Unauthorized(address addr)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x594b50fac6b6d253742752996198ca24326093c42d8e961eabcd2ee48f90a9c0",
                    "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                    "contractName": "CcipReceiverModule",
                    "deployedOn": "contract.CcipReceiverModule",
                    "gasUsed": 469476,
                    "gasCost": "745025171"
                  },
                  "CollateralConfigurationModule": {
                    "address": "0xCc1dB5266C15f2feC33422BA0164A07d3a49c890",
                    "abi": [
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error PositionOutOfBounds()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x65f6a4c230292784375d305c96040b9773cfe120858525f32e5cb1cae131d838",
                    "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                    "contractName": "CollateralConfigurationModule",
                    "deployedOn": "contract.CollateralConfigurationModule",
                    "gasUsed": 837646,
                    "gasCost": "744923523"
                  },
                  "CollateralModule": {
                    "address": "0x1FA7961F44E7afAc853687A3BD14Fc99245e5ba2",
                    "abi": [
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error AccountNotFound(uint128 accountId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x5547f1103096cc29b7043faa7f214fab5c9469215287ed5bc44ec411644981f9",
                    "sourceName": "contracts/modules/core/CollateralModule.sol",
                    "contractName": "CollateralModule",
                    "deployedOn": "contract.CollateralModule",
                    "gasUsed": 1729996,
                    "gasCost": "1000595905"
                  },
                  "CrossChainUSDModule": {
                    "address": "0xdfE88f5cA1C0d6D6670905c70b90279bb955F681",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xd9fae95ba4839abdf690f06a64933be03097fa65d14e21cf8aa6465546827203",
                    "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                    "contractName": "CrossChainUSDModule",
                    "deployedOn": "contract.CrossChainUSDModule",
                    "gasUsed": 595289,
                    "gasCost": "745041913"
                  },
                  "FeatureFlagModule": {
                    "address": "0x2a994F5289ad48e7100EbD64C785De35a225575e",
                    "abi": [
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xff26bfb17b4dae59a3823bcd45509593db257a24cff4186fa362bb271619398e",
                    "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                    "contractName": "FeatureFlagModule",
                    "deployedOn": "contract.FeatureFlagModule",
                    "gasUsed": 777054,
                    "gasCost": "1000671252"
                  },
                  "IssueUSDModule": {
                    "address": "0xD052fC25387f2Af10DFFB005871344A5E043b9bF",
                    "abi": [
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolNotFound(uint128 poolId)",
                      "event IssuanceFeePaid(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 feeAmount)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xf01ca008fdabc24f9eac5586326579d3bcd6433357427d68e67e41022b83bdde",
                    "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                    "contractName": "IssueUSDModule",
                    "deployedOn": "contract.IssueUSDModule",
                    "gasUsed": 2808883,
                    "gasCost": "1000660887"
                  },
                  "LiquidationModule": {
                    "address": "0x5F91da31B33F33dda6E037a94214da6C64faC165",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error CannotScaleEmptyMapping()",
                      "error EmptyDistribution()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xd05c4a9d74ee33b3e7701a110aac1eef400527bd532f9b69ac6efc0d5b922f29",
                    "sourceName": "contracts/modules/core/LiquidationModule.sol",
                    "contractName": "LiquidationModule",
                    "deployedOn": "contract.LiquidationModule",
                    "gasUsed": 2889614,
                    "gasCost": "1000569287"
                  },
                  "MarketCollateralModule": {
                    "address": "0xE66e9957902BE7CaF4c69662A48E346EB275A040",
                    "abi": [
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "error Unauthorized(address addr)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x812094481d4ee28015e69f121596688ace72d492520c370cb6612b54e992d08a",
                    "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                    "contractName": "MarketCollateralModule",
                    "deployedOn": "contract.MarketCollateralModule",
                    "gasUsed": 1222509,
                    "gasCost": "1000589407"
                  },
                  "MarketManagerModule": {
                    "address": "0x5e6E1d87494Ed954fdE743f85829f9c97C052B5E",
                    "abi": [
                      "error EmptyDistribution()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IncorrectMarketInterface(address market)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xf4b8b8938130ec4f51932e4edd5e7ebecea8665569b3a6d6bf67210b5308440e",
                    "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                    "contractName": "MarketManagerModule",
                    "deployedOn": "contract.MarketManagerModule",
                    "gasUsed": 2749047,
                    "gasCost": "1000568028"
                  },
                  "PoolConfigurationModule": {
                    "address": "0xEa7816325Cc48075A1870ce0FAd5C3881B3F94cA",
                    "abi": [
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xc5b3b324d27bd54f7c56ad45dbbce522ac0da2e8fdcc30fb9558271710c46dd1",
                    "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                    "contractName": "PoolConfigurationModule",
                    "deployedOn": "contract.PoolConfigurationModule",
                    "gasUsed": 446271,
                    "gasCost": "1000526514"
                  },
                  "PoolModule": {
                    "address": "0x10bE696c63818d5f13436A1dd40F6Be4E3901efe",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error EmptyDistribution()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x42e27f45f83583d0f6dfe396cebb1d62297d2ed8511e17109337ef63abb9898f",
                    "sourceName": "contracts/modules/core/PoolModule.sol",
                    "contractName": "PoolModule",
                    "deployedOn": "contract.PoolModule",
                    "gasUsed": 3705275,
                    "gasCost": "1000562068"
                  },
                  "RewardsManagerModule": {
                    "address": "0x7674601bC10bdF1FC9944D31ADC814b831b37231",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error RewardDistributorNotFound()",
                      "error RewardUnavailable(address distributor)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x334dcf0f2877c6ed9dcb5f1737ba95778151d0edb7cc0e73ce6565cee0678f9f",
                    "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                    "contractName": "RewardsManagerModule",
                    "deployedOn": "contract.RewardsManagerModule",
                    "gasUsed": 2260293,
                    "gasCost": "1000510538"
                  },
                  "USDTokenModule": {
                    "address": "0x2A529f6b9F91Bc1F809a7802cC944839aA240724",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error Unauthorized(address addr)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x56a3128e96c8e624b49ee3fcca5072b4acb15e2beca7065cf58c693f4bd6175d",
                    "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                    "contractName": "USDTokenModule",
                    "deployedOn": "contract.USDTokenModule",
                    "gasUsed": 1110294,
                    "gasCost": "1000651475"
                  },
                  "UtilsModule": {
                    "address": "0x80aC5F20e692bD62f2b2Caa7E3b370E67CAF4003",
                    "abi": [
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xbe6840a657bbb86445f5cfb1357fc8d4da322b4d6da6c622e8d6f820711d5fae",
                    "sourceName": "contracts/modules/core/UtilsModule.sol",
                    "contractName": "UtilsModule",
                    "deployedOn": "contract.UtilsModule",
                    "gasUsed": 759709,
                    "gasCost": "1000618974"
                  },
                  "VaultModule": {
                    "address": "0x604cd6F3E40713406c73eeb3fcBe67aDD7deAb19",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "error PoolNotFound(uint128 poolId)",
                      "error PositionOutOfBounds()",
                      "error RewardDistributorNotFound()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x3d48977428836555f1965bf6d308bff7b40f68c15eb62dbb2048b637709af307",
                    "sourceName": "contracts/modules/core/VaultModule.sol",
                    "contractName": "VaultModule",
                    "deployedOn": "contract.VaultModule",
                    "gasUsed": 3541151,
                    "gasCost": "1000598246"
                  },
                  "InitialModuleBundle": {
                    "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/modules/InitialModuleBundle.sol",
                    "contractName": "InitialModuleBundle",
                    "deployedOn": "contract.InitialModuleBundle",
                    "gasUsed": 0,
                    "gasCost": "0"
                  },
                  "InitialCoreProxy": {
                    "address": "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x828EED723cAF0A8F822249231266E38dF614923C",
                      "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x79bf753270dee970ff5f0d0549aca06cab6569f98182bda5bc6fd5902b3ed67d",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialCoreProxy",
                    "gasUsed": 185358,
                    "gasCost": "1000574402"
                  },
                  "AccountRouter": {
                    "address": "0xf3c8c97d6e9abe7d7e585a7b015bf8c5cabaa0dc",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployedOn": "router.AccountRouter",
                    "deployTxnHash": "0x7550561eea17b36ac083a97b4dbf541bc22572ad8902beb6c4916f6e0f832f54",
                    "contractName": "AccountRouter",
                    "sourceName": "AccountRouter.sol",
                    "gasUsed": 403596,
                    "gasCost": "1000647882"
                  },
                  "CoreRouter": {
                    "address": "0xeab23934b8cef6f823f27540b291f5d6ed275c9e",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event IssuanceFeePaid(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 feeAmount)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error RewardDistributorNotFound()",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "deployedOn": "router.CoreRouter",
                    "deployTxnHash": "0x09b4bb4deb76f37a71e5b2f0706ce485fbc6f17bd4a398b8bfaf9ef4b3546bb9",
                    "contractName": "CoreRouter",
                    "sourceName": "CoreRouter.sol",
                    "gasUsed": 1298704,
                    "gasCost": "1000640529"
                  },
                  "USDRouter": {
                    "address": "0x696be5d14863b2e7a6c151682458ee6820e6996c",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployedOn": "router.USDRouter",
                    "deployTxnHash": "0x869b3e74a644ec47d0f7dcdb2ae39a0e95342529ff5693176ad06d7812cf0bad",
                    "contractName": "USDRouter",
                    "sourceName": "USDRouter.sol",
                    "gasUsed": 395163,
                    "gasCost": "1000648406"
                  },
                  "CoreProxy": {
                    "address": "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event IssuanceFeePaid(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 feeAmount)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketSystemFeePaid(uint128 indexed marketId, uint256 feeAmount)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error RewardDistributorNotFound()",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[])",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "deployTxnHash": "",
                    "sourceName": "",
                    "contractName": "",
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "AccountProxy": {
                    "address": "0xC1DA71C6BD1D55Cd061852cbf13b58617Fee945B",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployTxnHash": "",
                    "sourceName": "",
                    "contractName": "",
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "USDProxy": {
                    "address": "0x83ed9FAE796Ec171a732af3D4D10B03BA9cd2568",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployTxnHash": "",
                    "sourceName": "",
                    "contractName": "",
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "imports": {
                  "trusted_multicall_forwarder": {
                    "url": "ipfs://QmTgMg1X26Jer5kyj2FY2DVAdm6u7b4KxRD31C879HHD6z",
                    "tags": [
                      "latest"
                    ],
                    "preset": "with-synthetix",
                    "settings": {
                      "salt": "salt"
                    },
                    "contracts": {
                      "TrustedMulticallForwarder": {
                        "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                        "abi": [
                          "constructor()",
                          "error AddressInsufficientBalance(address account)",
                          "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                          "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                          "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                          "error ERC2771UntrustfulTarget(address target, address forwarder)",
                          "error FailedInnerCall()",
                          "error InvalidAccountNonce(address account, uint256 currentNonce)",
                          "error InvalidShortString()",
                          "error StringTooLong(string str)",
                          "event EIP712DomainChanged()",
                          "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                          "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                          "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                          "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                          "function getBasefee() view returns (uint256 basefee)",
                          "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                          "function getBlockNumber() view returns (uint256 blockNumber)",
                          "function getChainId() view returns (uint256 chainid)",
                          "function getCurrentBlockCoinbase() view returns (address coinbase)",
                          "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                          "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                          "function getEthBalance(address addr) view returns (uint256 balance)",
                          "function getLastBlockHash() view returns (bytes32 blockHash)",
                          "function getPrevRandao() view returns (uint256 prevrandao)",
                          "function nonces(address owner) view returns (uint256)",
                          "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "sourceName": "src/TrustedMulticallForwarder.sol",
                        "contractName": "TrustedMulticallForwarder",
                        "deployedOn": "contract.TrustedMulticallForwarder",
                        "gasUsed": 0,
                        "gasCost": "0"
                      }
                    },
                    "extras": {
                      "salt": "salt"
                    }
                  },
                  "oracle_manager": {
                    "url": "ipfs://QmW65TRBkesnj3KjJPLyBj7q2ixbnYtB6Dc2uDBdkxXVvP",
                    "tags": [
                      "latest"
                    ],
                    "preset": "with-synthetix",
                    "contracts": {
                      "NodeModule": {
                        "address": "0xa28De4A0d0F0a824F4A71b9AEE5F5CEA05D9b62f",
                        "abi": [
                          "error DeviationToleranceExceeded(int256 deviation)",
                          "error InvalidInputPrice()",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "error StalenessToleranceExceeded()",
                          "error UnprocessableNode(bytes32 nodeId)",
                          "error UnsupportedOperation(uint8 operation)",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x540ac84284fbca6db2b9a66d35619b30f6622af8e10e5f6319816ac1f25eb5bc",
                        "sourceName": "contracts/modules/NodeModule.sol",
                        "contractName": "NodeModule",
                        "deployedOn": "contract.NodeModule",
                        "gasUsed": 4094153,
                        "gasCost": "1000593036"
                      },
                      "CoreModule": {
                        "address": "0x7b2745b9254cFfdC235F43740cF5a60d3b42ad91",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x2daefa0b902ff833eefc34d6747b73093a43982212bd39f5141c380fa7ca5d3f",
                        "sourceName": "contracts/modules/CoreModule.sol",
                        "contractName": "CoreModule",
                        "deployedOn": "contract.CoreModule",
                        "gasUsed": 942573,
                        "gasCost": "1000588051"
                      },
                      "InitialProxy": {
                        "address": "0x11fF13A137688A9951C6390Cf845A7C09791eD10",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [
                          "0x7b2745b9254cFfdC235F43740cF5a60d3b42ad91",
                          "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                        ],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x7280890c9719507d291d89e7b9e29c5626cc7f167d8711f9018ace99d0198b02",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "contract.InitialProxy",
                        "gasUsed": 249395,
                        "gasCost": "1000550696"
                      },
                      "OracleRouter": {
                        "address": "0xeb06eeee4cea59887a904d13a06d77af87f3e0a9",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error DeviationToleranceExceeded(int256 deviation)",
                          "error InvalidInputPrice()",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "error StalenessToleranceExceeded()",
                          "error UnprocessableNode(bytes32 nodeId)",
                          "error UnsupportedOperation(uint8 operation)",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployedOn": "router.OracleRouter",
                        "deployTxnHash": "0xc82859f30ca777b453efa7df84f83568b308d355dc1abe62ed56bc751295f586",
                        "contractName": "OracleRouter",
                        "sourceName": "OracleRouter.sol",
                        "gasUsed": 243136,
                        "gasCost": "1000598086"
                      },
                      "Proxy": {
                        "address": "0x11fF13A137688A9951C6390Cf845A7C09791eD10",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error DeviationToleranceExceeded(int256 deviation)",
                          "error InvalidInputPrice()",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "error StalenessToleranceExceeded()",
                          "error UnprocessableNode(bytes32 nodeId)",
                          "error UnsupportedOperation(uint8 operation)",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployTxnHash": "",
                        "sourceName": "",
                        "contractName": "",
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      }
                    },
                    "imports": {
                      "trusted_multicall_forwarder": {
                        "url": "ipfs://QmY5G1XsUw81j1s8j2j1asfak8Ke4qA2tHmhF7BnsFw6NB",
                        "tags": [
                          "latest"
                        ],
                        "preset": "with-oracle-manager",
                        "settings": {
                          "salt": "salt"
                        },
                        "contracts": {
                          "TrustedMulticallForwarder": {
                            "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                            "abi": [
                              "constructor()",
                              "error AddressInsufficientBalance(address account)",
                              "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                              "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                              "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                              "error ERC2771UntrustfulTarget(address target, address forwarder)",
                              "error FailedInnerCall()",
                              "error InvalidAccountNonce(address account, uint256 currentNonce)",
                              "error InvalidShortString()",
                              "error StringTooLong(string str)",
                              "event EIP712DomainChanged()",
                              "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                              "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                              "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                              "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                              "function getBasefee() view returns (uint256 basefee)",
                              "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                              "function getBlockNumber() view returns (uint256 blockNumber)",
                              "function getChainId() view returns (uint256 chainid)",
                              "function getCurrentBlockCoinbase() view returns (address coinbase)",
                              "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                              "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                              "function getEthBalance(address addr) view returns (uint256 balance)",
                              "function getLastBlockHash() view returns (bytes32 blockHash)",
                              "function getPrevRandao() view returns (uint256 prevrandao)",
                              "function nonces(address owner) view returns (uint256)",
                              "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "sourceName": "src/TrustedMulticallForwarder.sol",
                            "contractName": "TrustedMulticallForwarder",
                            "deployedOn": "contract.TrustedMulticallForwarder",
                            "gasUsed": 0,
                            "gasCost": "0"
                          }
                        },
                        "extras": {
                          "salt": "salt"
                        }
                      }
                    },
                    "settings": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    },
                    "txns": {
                      "upgrade_proxy": {
                        "hash": "0xd1a9329c6278fa3d15877dc75ff45dce9c2123ccb1cd4b19907ef2b525f641f8",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x11fF13A137688A9951C6390Cf845A7C09791eD10",
                                "0xEB06EeeE4cEA59887a904D13a06D77Af87F3e0a9"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 51933,
                        "gasCost": "1000581537",
                        "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                      }
                    },
                    "extras": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    }
                  }
                },
                "settings": {
                  "bundleSalt": "main",
                  "oracle_manager_source": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733"
                },
                "txns": {
                  "register_const_one_oracle": {
                    "hash": "0x28e8a467172203c7dda5cbb94b78e1615c7a6b1f70b0e89e1a607e993fc237d8",
                    "events": {
                      "NodeRegistered": [
                        {
                          "name": "NodeRegistered",
                          "args": [
                            "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                            8,
                            "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                            []
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.register_const_one_oracle",
                    "gasUsed": 108479,
                    "gasCost": "1000578302",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "upgrade_core_proxy": {
                    "hash": "0x615cdfd10a14f07317dcbdd125a6309520f7d6c77d183e29d0f0be1d2d149f19",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x5f8A1C6C3F3Cf684B02D32a8Ec8eF5b5be2722aE",
                            "0xEab23934b8Cef6f823f27540b291F5D6ed275c9e"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 47483,
                    "gasCost": "1000629310",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_burnUsd": {
                    "hash": "0x1a6f56510b7f74b57306409c8b674477ec4634000796e05239bd140094d73bc7",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6275726e55736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_burnUsd",
                    "gasUsed": 56949,
                    "gasCost": "1000615483",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_claimRewards": {
                    "hash": "0x86bc2207b5bfd375d489247d35d621c6a3aa6b37eae3a14c6d07670a2fb414e0",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x636c61696d526577617264730000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_claimRewards",
                    "gasUsed": 57009,
                    "gasCost": "1000635789",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_createAccount": {
                    "hash": "0xadb03ffef58e774a0d4b2ca50dab6559566862b81cd4d5050c2cd6a680911f41",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_createAccount",
                    "gasUsed": 57021,
                    "gasCost": "1000630314",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_delegateCollateral": {
                    "hash": "0xbbd82ee82cf4aa350f5cce033b6df35287ee939e5adc4bd061215439a9d2f76d",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_delegateCollateral",
                    "gasUsed": 57081,
                    "gasCost": "1000616781",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_deposit": {
                    "hash": "0x80d89f23f749a8de33394612d9b27079436fa7cf40a07a5b35cebfa214ab98ae",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f73697400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_deposit",
                    "gasUsed": 56949,
                    "gasCost": "1000641669",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_depositMarketCollateral": {
                    "hash": "0xb221a21a62585b7f59f78828732c06a2d2648e49c65e9d4014556d54404c7530",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                    "gasUsed": 57141,
                    "gasCost": "1000644946",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_depositMarketUsd": {
                    "hash": "0x86208409b3b738a4eb577657daddec52d64661fecc1c470b8c0a3bb6c1e32306",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketUsd",
                    "gasUsed": 57057,
                    "gasCost": "1000621391",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_liquidate": {
                    "hash": "0x2a13a7ae3e9604ea3274335e6fa9bd5bd5d324b547954a7fd37284f9f59be978",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174650000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidate",
                    "gasUsed": 56973,
                    "gasCost": "1000614088",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_liquidateVault": {
                    "hash": "0xd5caedea7823c18f1db35e1eb3324d713a76284e509f435daa8baf2f7336c0b4",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateVault",
                    "gasUsed": 57033,
                    "gasCost": "1000594959",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_mintUsd": {
                    "hash": "0xb0928585e9465a28a98df8001095916b11b09c66277db1d29b4447469787d4d8",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_mintUsd",
                    "gasUsed": 56949,
                    "gasCost": "1000616239",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_withdraw": {
                    "hash": "0x53f8d28ca0a2a9e1a593a202653647387ce10805f0c61e5db00dc082a521163b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x7769746864726177000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdraw",
                    "gasUsed": 56961,
                    "gasCost": "1000603996",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_withdrawMarketCollateral": {
                    "hash": "0x35ec1a13f427632dd5f92003af96f8073f7b5b7babb16bd18c11daa5021d1e47",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                    "gasUsed": 57153,
                    "gasCost": "1000648822",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "enable_feature_withdrawMarketUsd": {
                    "hash": "0xfd7b4b8c785715563263851a2e105e26ec208a7131940dff51d023b127756400",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                    "gasUsed": 57069,
                    "gasCost": "1000669635",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "init_account": {
                    "hash": "0x18a66340df2da3fe6efb8d0a218a79fcea766177829d58418e0e03af109f639d",
                    "events": {
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633732310000000000000000000000000000000000000000000000000000",
                            "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                            "0xC1DA71C6BD1D55Cd061852cbf13b58617Fee945B",
                            "0xf3C8c97D6e9abE7D7e585A7b015BF8c5CAbAa0dC"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 354887,
                    "gasCost": "1000665740",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "init_usd": {
                    "hash": "0xe9e3370e10b47c1157520cb3c3ec1db4cd18761878cf61f0224f6123d953ca92",
                    "events": {
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633230000000000000000000000000000000000000000000000000000000",
                            "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                            "0x83ed9FAE796Ec171a732af3D4D10B03BA9cd2568",
                            "0x696Be5D14863B2E7A6C151682458eE6820e6996c"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 327328,
                    "gasCost": "1000659971",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "set_oracle_manager": {
                    "hash": "0xc3ee7ed96acd10d9fa4eaf93d1df5428a9c691387451406fd1f9f132034e5274",
                    "events": {},
                    "deployedOn": "invoke.set_oracle_manager",
                    "gasUsed": 54810,
                    "gasCost": "1000639566",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  },
                  "configure_usd_collateral": {
                    "hash": "0x20836c79c86144d127fd8cdda51ad254070e8a717f303a964287229b50492b2e",
                    "events": {
                      "CollateralConfigured": [
                        {
                          "name": "CollateralConfigured",
                          "args": [
                            "0x83ed9FAE796Ec171a732af3D4D10B03BA9cd2568",
                            {
                              "depositingEnabled": true,
                              "issuanceRatioD18": "10000000000000000000",
                              "liquidationRatioD18": "10000000000000000000",
                              "liquidationRewardD18": "0",
                              "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                              "tokenAddress": "0x83ed9FAE796Ec171a732af3D4D10B03BA9cd2568",
                              "minDelegationD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                            }
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.configure_usd_collateral",
                    "gasUsed": 240627,
                    "gasCost": "1000619922",
                    "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  }
                },
                "extras": {
                  "bundleSalt": "main",
                  "oracle_manager_source": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733"
                }
              }
            },
            "txns": {
              "add_to_feature_flag_allowlist_register_market": {
                "hash": "0xafa6bf9f86f4ba2ed5e638a8c69148d896b072abf28f1265b20ef6a60e211367",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                        "0xEf654C46c8f33c7F6b0db04BF64DFd5f228c35d4"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.add_to_feature_flag_allowlist_register_market",
                "gasUsed": 101633,
                "gasCost": "1000889772",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "upgrade_proxy": {
                "hash": "0x0426bc59ba85ef83dd926f0d0dbc92510d68fa9707bf500563b3395ef5d6292b",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0xEf654C46c8f33c7F6b0db04BF64DFd5f228c35d4",
                        "0xC0AD56285E1451B38Fb0E3B99D679BD90Dd659C2"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 52009,
                "gasCost": "1000848988",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "init_or_upgrade_nft": {
                "hash": "0x565cc8263f426bf5abeb36529507fa8232abb530763350d6d40fee4d56fab348",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                        "0xba5F6C36b3f82f823E860a9aB7fe41562D50b99a",
                        "0xf3C8c97D6e9abE7D7e585A7b015BF8c5CAbAa0dC"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_or_upgrade_nft",
                "gasUsed": 335015,
                "gasCost": "1000887317",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              },
              "set_reward_distributor_implementation": {
                "hash": "0x6d6c928c0cf95df6c87c197a158b0678ace84c69c9d6d6998c375aaaa00a1dc3",
                "events": {},
                "deployedOn": "invoke.set_reward_distributor_implementation",
                "gasUsed": 55106,
                "gasCost": "1000863149",
                "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
              }
            },
            "extras": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "synthetixPackage": "synthetix:latest",
              "synthetixPreset": "main"
            }
          }
        }
      },
      "version": 7
    },
    "setting.wbtc_address": {
      "artifacts": {
        "settings": {
          "wbtc_address": "0x1621c378BA5105043500aCbd6eE8489632F6d0b0"
        }
      },
      "hash": "6fb5227ae8533384a6f3bb1a334e574b",
      "version": 7
    },
    "setting.weth_address": {
      "artifacts": {
        "settings": {
          "weth_address": "0x6167abDeFB6F9FE83860B415db0Da20124246372"
        }
      },
      "hash": "059840d4e6ef93dfd84379663a85cf08",
      "version": 7
    },
    "invoke.BfpMarketProxy_createMarket_eth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "BfpMarketProxy_createMarket_eth": {
            "hash": "0x858958823032af957b3b20f5cef042101f22daf42d65af80e539deaa362c70af",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1",
                    "0x4554485045525000000000000000000000000000000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.BfpMarketProxy_createMarket_eth",
            "gasUsed": 281920,
            "gasCost": "1000894605",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {
          "eth_market_id": "1"
        }
      },
      "hash": "0a00d7f13ae37a5ca406c996d7ea0245",
      "version": 7
    },
    "invoke.BfpMarketProxy_createRewardDistributor_wbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "BfpMarketProxy_createRewardDistributor_wbtc": {
            "hash": "0x3245a5ee00ca03616fe31d1f6bc1e2630e064bbd4cfbd3306da10a43f561d618",
            "events": {
              "RewardDistributorCreated": [
                {
                  "name": "RewardDistributorCreated",
                  "args": [
                    "0xaa0343b618aDe1F4f9E6D03951129Cb487e9125E"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.BfpMarketProxy_createRewardDistributor_wbtc",
            "gasUsed": 293522,
            "gasCost": "1000867029",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {
          "wbtc_rewards_distributor": "0xaa0343b618aDe1F4f9E6D03951129Cb487e9125E"
        }
      },
      "hash": "7ce93510d1792176dfbf7b374f3f6fb4",
      "version": 7
    },
    "invoke.BfpMarketProxy_createRewardDistributor_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "BfpMarketProxy_createRewardDistributor_weth": {
            "hash": "0x23c4a9fe9ee6feeb2146a21988df93b3d94c348a063494ee3b73c8aa51bb021a",
            "events": {
              "RewardDistributorCreated": [
                {
                  "name": "RewardDistributorCreated",
                  "args": [
                    "0xB979379d6dF13eE75236aBEFbfCADF65F4c929b3"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.BfpMarketProxy_createRewardDistributor_weth",
            "gasUsed": 293534,
            "gasCost": "1000933297",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {
          "weth_rewards_distributor": "0xB979379d6dF13eE75236aBEFbfCADF65F4c929b3"
        }
      },
      "hash": "798e39446b94686348b36336f723ad40",
      "version": 7
    },
    "invoke.BfpMarketProxy_setEthOracleNodeId": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "BfpMarketProxy_setEthOracleNodeId": {
            "hash": "0x3bdb365006f741058ba7b275668ecb1ec14cf5b6e3c41d760becfcdcfc16840b",
            "events": {},
            "deployedOn": "invoke.BfpMarketProxy_setEthOracleNodeId",
            "gasUsed": 55176,
            "gasCost": "1001035435",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "6119ca6a9d3feba836b6f8b44896e58f",
      "version": 7
    },
    "invoke.BfpMarketProxy_setMarketConfiguration": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "BfpMarketProxy_setMarketConfiguration": {
            "hash": "0x12218c067e3b1f79a6f5d40e60fe5a5a7391f7c88c5c8a87af4767d2248ca8c7",
            "events": {
              "GlobalMarketConfigured": [
                {
                  "name": "GlobalMarketConfigured",
                  "args": [
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.BfpMarketProxy_setMarketConfiguration",
            "gasUsed": 288501,
            "gasCost": "1001028710",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "d4348874b654cb1b1c87b9a105244823",
      "version": 7
    },
    "invoke.BfpMarketProxy_setPyth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "BfpMarketProxy_setPyth": {
            "hash": "0xc47cfcc00de7241a37dd701aa245c2905e5476f24382cbd4eaa8075a7f438008",
            "events": {},
            "deployedOn": "invoke.BfpMarketProxy_setPyth",
            "gasUsed": 55166,
            "gasCost": "1001031953",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "0d995eb74cec854fc04f0249ee063fae",
      "version": 7
    },
    "invoke.CoreProxy_configureCollateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureCollateral": {
            "hash": "0x48fb0b96b891b396adffb86492e146076f671970f9a53bcc2cbb1221a60700fc",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x1621c378BA5105043500aCbd6eE8489632F6d0b0",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "3000000000000000000",
                      "liquidationRatioD18": "1500000000000000000",
                      "liquidationRewardD18": "10000000000000000",
                      "oracleNodeId": "0x074c76efc670c1aece54358233fb2227e7f7e5a67a15ad17af98ebfea8576ecf",
                      "tokenAddress": "0x1621c378BA5105043500aCbd6eE8489632F6d0b0",
                      "minDelegationD18": "10000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureCollateral",
            "gasUsed": 223239,
            "gasCost": "1001001644",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "e29f6044e826f4157b7271d66dd3c069",
      "version": 7
    },
    "invoke.configureWethCollateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configureWethCollateral": {
            "hash": "0xe68768256baf04ac1019ac7a383022ba1cc8cc12a0c7cddd7597445da2cbd547",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x6167abDeFB6F9FE83860B415db0Da20124246372",
                    {
                      "depositingEnabled": true,
                      "issuanceRatioD18": "3000000000000000000",
                      "liquidationRatioD18": "1500000000000000000",
                      "liquidationRewardD18": "10000000000000000",
                      "oracleNodeId": "0xa1ad04e5fe674fe144be389adb9340f0b15e73d866da4e70145eec4ef867955b",
                      "tokenAddress": "0x6167abDeFB6F9FE83860B415db0Da20124246372",
                      "minDelegationD18": "10000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configureWethCollateral",
            "gasUsed": 243163,
            "gasCost": "1000968496",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "cc71450d4ab8d544ab233afd01580437",
      "version": 7
    },
    "invoke.createScPool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createScPool": {
            "hash": "0x421e1ce157c00636094dd7ffb1b5a89d3bb6fc3c54736f13f0d1110937617467",
            "events": {
              "PoolCreated": [
                {
                  "name": "PoolCreated",
                  "args": [
                    "1",
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B",
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createScPool",
            "gasUsed": 82562,
            "gasCost": "1000975131",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "38a81b0c3f9131fc148c52a476e111b9",
      "version": 7
    },
    "invoke.registerSnxWithStaleness": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSnxWithStaleness": {
            "hash": "0xd373137d369d1342a77f20047e83d42205cfdd9790e384e3331d4060e38d7ac9",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x09f8df447a770f5bc70758a1a954a36be1f77549336d9823ddf5412f91c5f672",
                    7,
                    "0x0000000000000000000000000000000000000000000000000000000000000e10",
                    [
                      "0xd2ecd19ffabdec991a3ed919bc2565574bf2bb7a0fb09de7413c3115c5d15778"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSnxWithStaleness",
            "gasUsed": 189565,
            "gasCost": "1000972591",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {
          "snx_oracle_id": "0x09f8df447a770f5bc70758a1a954a36be1f77549336d9823ddf5412f91c5f672"
        }
      },
      "hash": "3d26f85689e4e40cbb47c2d9f9bf804e",
      "version": 7
    },
    "invoke.BfpMarketProxy_setMarginCollateralConfiguration": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "BfpMarketProxy_setMarginCollateralConfiguration": {
            "hash": "0x24e33f5db03daee8e2e14d36c3e840159f700168c0cc7d9a55e2219c2fd7df70",
            "events": {
              "MarginCollateralConfigured": [
                {
                  "name": "MarginCollateralConfigured",
                  "args": [
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B",
                    "3"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.BfpMarketProxy_setMarginCollateralConfiguration",
            "gasUsed": 438069,
            "gasCost": "1000982126",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "7f8e49aafdacb0b1777332c7f02b9987",
      "version": 7
    },
    "invoke.BfpMarketProxy_setMarketConfigurationById_eth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "BfpMarketProxy_setMarketConfigurationById_eth": {
            "hash": "0xae09e4d379a48cd9d562074f520bc9f8c0fc0009709c4bd19d61c83b230deb93",
            "events": {
              "MarketConfigured": [
                {
                  "name": "MarketConfigured",
                  "args": [
                    "1",
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.BfpMarketProxy_setMarketConfigurationById_eth",
            "gasUsed": 355063,
            "gasCost": "1000976565",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "870a68042399b5992bfb0bba18ef3339",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_wbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_wbtc": {
            "hash": "0xf269039a0008535ce68e6f7577aa6d8cda761e45c907ce2d2437fce3cc19121b",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "1",
                    "0x1621c378BA5105043500aCbd6eE8489632F6d0b0",
                    "20000000000000000000000",
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_wbtc",
            "gasUsed": 57772,
            "gasCost": "1000943698",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "3ecefee0ce4f716a223ffad3cb175449",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_weth": {
            "hash": "0xf0725ea5476580bedbd973aada837d4da88af0b518ecb9d945ae6a9fcbf482e2",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "1",
                    "0x6167abDeFB6F9FE83860B415db0Da20124246372",
                    "20000000000000000000000",
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_weth",
            "gasUsed": 57784,
            "gasCost": "1000930175",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "012d26fa278285ecc82215b2a44d2fff",
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_wbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_wbtc": {
            "hash": "0xf8bd9b0acf56c68556becb7bad7e68eb34d85f9bfd0eac3ca9b7590b28c57d8f",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0x1621c378BA5105043500aCbd6eE8489632F6d0b0",
                    "0xaa0343b618aDe1F4f9E6D03951129Cb487e9125E"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_wbtc",
            "gasUsed": 131643,
            "gasCost": "1000990774",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "b96fdd3ee7657b7cd73de16c74e9e74e",
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_weth": {
            "hash": "0xb2ebc9fafd7e4ea0e35cc64f0559e8b65eca1ac49dbbc83eb86d8539c55100bd",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0x6167abDeFB6F9FE83860B415db0Da20124246372",
                    "0xB979379d6dF13eE75236aBEFbfCADF65F4c929b3"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_weth",
            "gasUsed": 131655,
            "gasCost": "1000969348",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "4add85e607871b14f2a398701ed74ede",
      "version": 7
    },
    "invoke.CoreProxy_setPoolConfiguration": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_setPoolConfiguration": {
            "hash": "0xe7f9437a1b3be9a7970623dee2cca9ed99b628cbcf1802ec308758ee94e4e9c5",
            "events": {
              "PoolConfigurationSet": [
                {
                  "name": "PoolConfigurationSet",
                  "args": [
                    "1",
                    [
                      {
                        "marketId": "1",
                        "weightD18": "1",
                        "maxDebtShareValueD18": "1000000000000000000"
                      }
                    ],
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_setPoolConfiguration",
            "gasUsed": 198542,
            "gasCost": "1000987889",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "1d555b3688b83b618910ea4115b37f48",
      "version": 7
    },
    "invoke.configureSnxCollateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configureSnxCollateral": {
            "hash": "0x827629c538a681498effaca2a425dfff29e4d05fa7cc59542888ea0eefe906c0",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x29Ba9b0C440CE9e7B0E46138B5Fda83c22467006",
                    {
                      "depositingEnabled": true,
                      "issuanceRatioD18": "4000000000000000000",
                      "liquidationRatioD18": "1500000000000000000",
                      "liquidationRewardD18": "0",
                      "oracleNodeId": "0x09f8df447a770f5bc70758a1a954a36be1f77549336d9823ddf5412f91c5f672",
                      "tokenAddress": "0x29Ba9b0C440CE9e7B0E46138B5Fda83c22467006",
                      "minDelegationD18": "0"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configureSnxCollateral",
            "gasUsed": 203243,
            "gasCost": "1001078695",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "7d72ebdb6c4f6df11fd8ebe105b02ea5",
      "version": 7
    },
    "invoke.setPreferredPool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPreferredPool": {
            "hash": "0xe62dff7b714b50aceec3eed1a116f04ed5d3858e990740bd78403e6ba9994431",
            "events": {
              "PreferredPoolSet": [
                {
                  "name": "PreferredPoolSet",
                  "args": [
                    "1"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPreferredPool",
            "gasUsed": 58352,
            "gasCost": "1001064691",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "b660f1bbca1038bde3a834ce8289f3fa",
      "version": 7
    },
    "invoke.setScPoolName": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setScPoolName": {
            "hash": "0xf03202d331d1492cad865f96a55bf491ef058b2750c861d7b2edbe511a4941e3",
            "events": {
              "PoolNameUpdated": [
                {
                  "name": "PoolNameUpdated",
                  "args": [
                    "1",
                    "Spartan Council Pool",
                    "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setScPoolName",
            "gasUsed": 61033,
            "gasCost": "1001097929",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "04cd1d8529d34af497496072e1391581",
      "version": 7
    },
    "invoke.BfpMarketProxy_enableAllFeatures": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "BfpMarketProxy_enableAllFeatures": {
            "hash": "0xcdb65c8e0b6a4dea5da4a439f39464720a64a4e77b55cc33149595f0d0f7f6b9",
            "events": {
              "PerpMarketSuspended": [
                {
                  "name": "PerpMarketSuspended",
                  "args": [
                    false
                  ]
                }
              ]
            },
            "deployedOn": "invoke.BfpMarketProxy_enableAllFeatures",
            "gasUsed": 302679,
            "gasCost": "1009693086",
            "signer": "0x431D454Bd4d352A0b1f45AE11EF1182bBEec6a7B"
          }
        },
        "settings": {}
      },
      "hash": "e98c7af2388b86d9f1887f9fd4c77d0a",
      "version": 7
    }
  },
  "options": {},
  "status": "complete",
  "meta": {},
  "miscUrl": "ipfs://QmeSt2mnJKE8qmRhLyYbHQQxDKpsFbcWnw5e7JF4xVbN6k",
  "chainId": 11155111
}